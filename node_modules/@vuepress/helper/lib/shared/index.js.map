{"version":3,"file":"index.js","sources":["../../src/shared/helper.ts","../../src/shared/deepAssign.ts","../../src/shared/date.ts","../../src/shared/link.ts"],"sourcesContent":["import { isString } from 'vuepress/shared'\n\nexport { isFunction, isString, isPlainObject } from 'vuepress/shared'\n\n/* Type helper */\n\n/**\n * Check if a value is defined\n *\n * 检查值是否已定义\n *\n * @param val - The value to check / 要检查的值\n *\n * @returns Whether the value is defined / 值是否已定义\n *\n * @example\n * ```ts\n * isDef(undefined) // false\n * isDef(null) // true\n * isDef(0) // true\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isDef = <T = any>(val?: T): val is T => typeof val !== 'undefined'\n\n/**\n * Check if a value is boolean\n *\n * 检查值是否为布尔值\n *\n * @param val - The value to check / 要检查的值\n *\n * @returns Whether the value is boolean / 值是否为布尔值\n *\n * @example\n * ```ts\n * isBoolean(true) // true\n * isBoolean(false) // true\n * isBoolean('true') // false\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nexport const isBoolean = (val: any): val is boolean => typeof val === 'boolean'\n\n/**\n * Check if a value is number\n *\n * 检查值是否为数字\n *\n * @param val - The value to check / 要检查的值\n *\n * @returns Whether the value is number / 值是否为数字\n *\n * @example\n * ```ts\n * isNumber(42) // true\n * isNumber('42') // false\n * isNumber(NaN) // true\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nexport const isNumber = (val: any): val is number => typeof val === 'number'\n\n/**\n * Check if a value is array\n *\n * 检查值是否为数组\n */\nexport const { isArray } = Array\n\n/**\n * Check if a value is regexp\n *\n * 检查值是否为正则表达式\n *\n * @param val - The value to check / 要检查的值\n *\n * @returns Whether the value is regexp / 值是否为正则表达式\n *\n * @example\n * ```ts\n * isRegExp(/test/) // true\n * isRegExp('test') // false\n * ```\n */\nexport const isRegExp = (val: unknown): val is RegExp => val instanceof RegExp\n\n/* String helper */\n\n/**\n * Check if a value is starting with the given prefix\n *\n * 检查值是否以给定前缀开头\n *\n * @param str - The string to check / 要检查的字符串\n * @param prefix - The prefix to match / 要匹配的前缀\n *\n * @returns Whether the string starts with the prefix / 字符串是否以前缀开头\n *\n * @example\n * ```ts\n * startsWith('hello world', 'hello') // true\n * startsWith('hello world', 'world') // false\n * startsWith(123, 'hello') // false\n * ```\n */\nexport const startsWith = (str: unknown, prefix: string): boolean =>\n  isString(str) && str.startsWith(prefix)\n\n/**\n * Check if a value is ending with the given suffix\n *\n * 检查值是否以给定后缀结尾\n *\n * @param str - The string to check / 要检查的字符串\n * @param suffix - The suffix to match / 要匹配的后缀\n *\n * @returns Whether the string ends with the suffix / 字符串是否以后缀结尾\n *\n * @example\n * ```ts\n * endsWith('hello world', 'world') // true\n * endsWith('hello world', 'hello') // false\n * endsWith(123, 'world') // false\n * ```\n */\nexport const endsWith = (str: unknown, suffix: string): boolean =>\n  isString(str) && str.endsWith(suffix)\n\nexport {\n  ensureEndingSlash,\n  ensureLeadingSlash,\n  removeEndingSlash,\n  removeLeadingSlash,\n} from 'vuepress/shared'\n\n/* Object helper */\nexport const { entries } = Object\nexport const { fromEntries } = Object\nexport const { keys } = Object\nexport const { values } = Object\n","import { entries, isArray, isPlainObject } from './helper.js'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype IAnyObject = Record<string, any>\n\n/**\n * Deep merge objects to the first one\n *\n * 深度合并对象到第一个对象\n *\n * @param originObject - The target object to merge into / 要合并到的目标对象\n * @param overrideObjects - Objects to merge from / 要合并的对象\n *\n * @returns Merged object / 合并后的对象\n *\n * @example\n * ```ts\n * const obj1 = { a: 1, b: { c: 2 } }\n * const obj2 = { b: { d: 3 }, e: 4 }\n * deepAssign(obj1, obj2) // { a: 1, b: { c: 2, d: 3 }, e: 4 }\n * ```\n */\nexport const deepAssign = <\n  T extends IAnyObject,\n  U extends IAnyObject = T,\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-parameters\n  V extends Partial<T> & Partial<U> = T & U,\n>(\n  originObject: T,\n  ...overrideObjects: (U | null | undefined)[]\n): V => {\n  if (overrideObjects.length === 0) return originObject as unknown as V\n\n  /** Object being merged */\n  const assignObject = overrideObjects.shift()\n\n  if (assignObject)\n    entries(assignObject).forEach(([property, value]) => {\n      if (property === '__proto__' || property === 'constructor') return\n      if (isPlainObject(originObject[property]) && isPlainObject(value))\n        deepAssign(originObject[property], value)\n      else if (isArray(value))\n        (originObject as IAnyObject)[property] = [...(value as unknown[])]\n      else if (isPlainObject(value))\n        (originObject as IAnyObject)[property] = {\n          ...value,\n        }\n      else\n        (originObject as IAnyObject)[property] = assignObject[\n          property\n        ] as unknown\n    })\n\n  return deepAssign(originObject, ...overrideObjects)\n}\n","/**\n * Get Date info from user input\n *\n * 从用户输入获取日期信息\n *\n * @param input - The input to parse / 要解析的输入\n *\n * @returns Date object or null if input is invalid / 日期对象，如果输入无效则返回 null\n *\n * @example\n * ```ts\n * getDate('2023-01-01') // Date object\n * getDate(1640995200000) // Date object\n * getDate('invalid') // null\n * ```\n */\nexport const getDate = (input: unknown): Date | null => {\n  if (input) {\n    if (typeof input === 'number') return new Date(input)\n\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    const date = Date.parse(input.toString())\n\n    if (!Number.isNaN(date)) return new Date(date)\n  }\n\n  return null\n}\n\n/**\n * Date sorter from latest to oldest\n *\n * 从最新到最旧的日期排序器\n *\n * @param valueA - First date value / 第一个日期值\n * @param valueB - Second date value / 第二个日期值\n *\n * @returns Comparison result / 比较结果\n *\n * @example\n * ```ts\n * const dates = ['2023-01-01', '2023-12-31', '2023-06-15']\n * dates.sort(dateSorter) // ['2023-12-31', '2023-06-15', '2023-01-01']\n * ```\n */\nexport const dateSorter = (\n  valueA: Date | number | string | undefined,\n  valueB: Date | number | string | undefined,\n): number => {\n  const dateA = getDate(typeof valueA === 'number' ? new Date(valueA) : valueA)\n  const dateB = getDate(typeof valueB === 'number' ? new Date(valueB) : valueB)\n\n  if (!dateA) return dateB ? 1 : 0\n  if (!dateB) return -1\n\n  return dateB.getTime() - dateA.getTime()\n}\n","import { isLinkExternal, isLinkWithProtocol } from 'vuepress/shared'\nimport { startsWith } from './helper.js'\n\nexport { isLinkExternal, isLinkHttp, isLinkWithProtocol } from 'vuepress/shared'\n\n/**\n * Check if a value is a valid absolute url\n *\n * 检查值是否为有效的绝对 URL\n *\n * @param test - The value to test / 要测试的值\n *\n * @returns Whether the value is a valid absolute url / 值是否为有效的绝对 URL\n *\n * @example\n * ```ts\n * isLinkAbsolute('/path/to/page') // true\n * isLinkAbsolute('//example.com') // false\n * isLinkAbsolute('relative/path') // false\n * ```\n */\nexport const isLinkAbsolute = (test: unknown): boolean =>\n  startsWith(test, '/') && (test as string)[1] !== '/'\n\n/**\n * Check if a link is relative\n *\n * 检查链接是否为相对链接\n *\n * @param link - The link to check / 要检查的链接\n *\n * @returns Whether the link is relative / 链接是否为相对链接\n *\n * @example\n * ```ts\n * isLinkRelative('path/to/page') // true\n * isLinkRelative('/absolute/path') // true\n * isLinkRelative('https://example.com') // false\n * ```\n */\nexport const isLinkRelative = (link: string): boolean =>\n  !isLinkExternal(link) && !isLinkWithProtocol(link)\n"],"names":["isDef","val","isBoolean","isNumber","isArray","isRegExp","startsWith","str","prefix","isString","endsWith","suffix","entries","fromEntries","keys","values","deepAssign","originObject","overrideObjects","assignObject","property","value","isPlainObject","getDate","input","date","dateSorter","valueA","valueB","dateA","dateB","isLinkAbsolute","test","isLinkRelative","link","isLinkExternal","isLinkWithProtocol"],"mappings":"kVAuBO,MAAMA,EAAkBC,GAAsB,OAAOA,EAAQ,IAmBvDC,EAAaD,GAA6B,OAAOA,GAAQ,UAmBzDE,EAAYF,GAA4B,OAAOA,GAAQ,SAOvD,CAAE,QAAAG,CAAQ,EAAI,MAiBdC,EAAYJ,GAAgCA,aAAe,OAqB3DK,EAAa,CAACC,EAAcC,IACvCC,EAASF,CAAG,GAAKA,EAAI,WAAWC,CAAM,EAmB3BE,EAAW,CAACH,EAAcI,IACrCF,EAASF,CAAG,GAAKA,EAAI,SAASI,CAAM,EAUzB,CAAE,QAAAC,CAAQ,EAAI,OACd,CAAE,YAAAC,CAAY,EAAI,OAClB,CAAE,KAAAC,CAAK,EAAI,OACX,CAAE,OAAAC,CAAO,EAAI,OCtHbC,EAAa,CAMxBC,KACGC,IACG,CACN,GAAIA,EAAgB,SAAW,EAAG,OAAOD,EAGzC,MAAME,EAAeD,EAAgB,QAErC,OAAIC,GACFP,EAAQO,CAAY,EAAE,QAAQ,CAAC,CAACC,EAAUC,CAAK,IAAM,CAC/CD,IAAa,aAAeA,IAAa,gBACzCE,EAAcL,EAAaG,CAAQ,CAAC,GAAKE,EAAcD,CAAK,EAC9DL,EAAWC,EAAaG,CAAQ,EAAGC,CAAK,EACjCjB,EAAQiB,CAAK,EACnBJ,EAA4BG,CAAQ,EAAI,CAAC,GAAIC,CAAmB,EAC1DC,EAAcD,CAAK,EACzBJ,EAA4BG,CAAQ,EAAI,CACvC,GAAGC,CACL,EAECJ,EAA4BG,CAAQ,EAAID,EACvCC,CACF,EACJ,CAAC,EAEIJ,EAAWC,EAAc,GAAGC,CAAe,CACpD,ECtCaK,EAAWC,GAAgC,CACtD,GAAIA,EAAO,CACT,GAAI,OAAOA,GAAU,SAAU,OAAO,IAAI,KAAKA,CAAK,EAGpD,MAAMC,EAAO,KAAK,MAAMD,EAAM,UAAU,EAExC,GAAI,CAAC,OAAO,MAAMC,CAAI,EAAG,OAAO,IAAI,KAAKA,CAAI,CAC/C,CAEA,OAAO,IACT,EAkBaC,EAAa,CACxBC,EACAC,IACW,CACX,MAAMC,EAAQN,EAAQ,OAAOI,GAAW,SAAW,IAAI,KAAKA,CAAM,EAAIA,CAAM,EACtEG,EAAQP,EAAQ,OAAOK,GAAW,SAAW,IAAI,KAAKA,CAAM,EAAIA,CAAM,EAE5E,OAAKC,EACAC,EAEEA,EAAM,QAAA,EAAYD,EAAM,QAAA,EAFZ,GADAC,EAAQ,EAAI,CAIjC,ECnCaC,EAAkBC,GAC7B1B,EAAW0B,EAAM,GAAG,GAAMA,EAAgB,CAAC,IAAM,IAkBtCC,EAAkBC,GAC7B,CAACC,EAAeD,CAAI,GAAK,CAACE,EAAmBF,CAAI"}