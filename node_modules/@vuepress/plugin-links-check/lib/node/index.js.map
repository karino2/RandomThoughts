{"version":3,"file":"index.js","sources":["../../src/node/checkMarkdownLink.ts","../../src/node/linksCheckPlugin.ts"],"sourcesContent":["import { isLinkAbsolute } from '@vuepress/helper'\nimport type { App, Page } from 'vuepress/core'\nimport { logger } from 'vuepress/utils'\n\n/**\n * Check markdown links in a page and report broken links\n *\n * 检查页面中的 Markdown 链接并报告死链接\n *\n * @param page - The page to check / 要检查的页面\n * @param app - VuePress app instance / VuePress 应用实例\n * @param isIgnoreLink - Function to check if a link should be ignored / 检查链接是否应被忽略的函数\n *\n * @returns Whether any broken links were found / 是否发现了死链接\n */\nexport const checkMarkdownLink = (\n  page: Page,\n  app: App,\n  isIgnoreLink: (link: string) => boolean,\n): boolean => {\n  const pagePath = page.filePathRelative ?? page.path\n\n  const markdownLinks = page.links.filter(({ raw }) =>\n    raw.match(/^.+.md((?:\\?|#).*)?$/),\n  )\n\n  const brokenLinks = [\n    ...markdownLinks\n      // Relative markdown links\n      .filter(({ raw }) => !isLinkAbsolute(raw))\n      .filter(\n        ({ relative }) =>\n          // Check whether the page exists\n          app.pages.every(\n            ({ filePathRelative }) => filePathRelative !== decodeURI(relative),\n          ) && !isIgnoreLink(relative),\n      ),\n    ...markdownLinks\n      // Absolute markdown links\n      .filter(({ raw }) => isLinkAbsolute(raw))\n      .filter(\n        ({ absolute }) =>\n          // Check whether the page exists\n          absolute &&\n          app.pages.every(\n            ({ filePathRelative }) =>\n              !filePathRelative ||\n              (`${app.siteData.base}${filePathRelative}` !==\n                decodeURI(absolute) &&\n                !isIgnoreLink(absolute)),\n          ),\n      ),\n  ].map(({ raw }) => raw)\n\n  if (brokenLinks.length) {\n    logger.warn(`Broken links found in ${pagePath}: ${brokenLinks.join(', ')}`)\n\n    return true\n  }\n\n  return false\n}\n","import { isArray, isFunction, isRegExp } from '@vuepress/helper'\nimport type { Plugin } from 'vuepress'\nimport { checkMarkdownLink } from './checkMarkdownLink.js'\nimport type { LinksCheckPluginOptions } from './options.js'\n\n/**\n * VuePress plugin to check dead links in markdown files\n *\n * VuePress 插件，用于检查 Markdown 文件中的死链接\n *\n * @param options - Plugin options / 插件选项\n *\n * @example\n * ```ts\n * import { linksCheckPlugin } from '@vuepress/plugin-links-check'\n *\n * export default {\n *   plugins: [\n *     // Basic usage\n *     linksCheckPlugin(),\n *\n *     // With options\n *     linksCheckPlugin({\n *       dev: true,\n *       build: 'error', // Fail build on dead links\n *       exclude: [\n *         /^https?:\\/\\/example\\.com/,\n *         'mailto:example@example.com',\n *         (link, isDev) => isDev && link.startsWith('/api/')\n *       ]\n *     })\n *   ]\n * }\n * ```\n */\nexport const linksCheckPlugin =\n  ({\n    dev = true,\n    build = true,\n    exclude: ignore = [],\n  }: LinksCheckPluginOptions): Plugin =>\n  (app) => {\n    const enabled =\n      (app.env.isDev && dev) || (app.env.isBuild && build) || false\n\n    const isLinkIgnored = isFunction(ignore)\n      ? (link: string): boolean => ignore(link, app.env.isDev)\n      : isArray(ignore)\n        ? (link: string): boolean =>\n            ignore.some((item) =>\n              isRegExp(item) ? item.test(link) : item === link,\n            )\n        : (): boolean => false\n\n    const shouldThrowError = app.env.isBuild && build === 'error'\n    let isAppInitialized = false\n\n    return {\n      name: '@vuepress/plugin-links-check',\n\n      extendsPage: (page) => {\n        if (enabled && isAppInitialized) {\n          checkMarkdownLink(page, app, isLinkIgnored)\n        }\n      },\n\n      onInitialized: () => {\n        isAppInitialized = true\n\n        if (enabled) {\n          const results = app.pages.map((page) =>\n            checkMarkdownLink(page, app, isLinkIgnored),\n          )\n\n          if (shouldThrowError && results.some(Boolean)) {\n            throw new Error(\n              'Dead links found in markdown, please check the console logs for details',\n            )\n          }\n        }\n      },\n    }\n  }\n"],"names":["checkMarkdownLink","page","app","isIgnoreLink","pagePath","markdownLinks","raw","brokenLinks","isLinkAbsolute","relative","filePathRelative","absolute","logger","linksCheckPlugin","dev","build","ignore","enabled","isLinkIgnored","isFunction","link","isArray","item","isRegExp","shouldThrowError","isAppInitialized","results"],"mappings":"qIAeO,MAAMA,EAAoB,CAC/BC,EACAC,EACAC,IACY,CACZ,MAAMC,EAAWH,EAAK,kBAAoBA,EAAK,KAEzCI,EAAgBJ,EAAK,MAAM,OAAO,CAAC,CAAE,IAAAK,CAAI,IAC7CA,EAAI,MAAM,sBAAsB,CAClC,EAEMC,EAAc,CAClB,GAAGF,EAEA,OAAO,CAAC,CAAE,IAAAC,CAAI,IAAM,CAACE,EAAeF,CAAG,CAAC,EACxC,OACC,CAAC,CAAE,SAAAG,CAAS,IAEVP,EAAI,MAAM,MACR,CAAC,CAAE,iBAAAQ,CAAiB,IAAMA,IAAqB,UAAUD,CAAQ,CACnE,GAAK,CAACN,EAAaM,CAAQ,CAC/B,EACF,GAAGJ,EAEA,OAAO,CAAC,CAAE,IAAAC,CAAI,IAAME,EAAeF,CAAG,CAAC,EACvC,OACC,CAAC,CAAE,SAAAK,CAAS,IAEVA,GACAT,EAAI,MAAM,MACR,CAAC,CAAE,iBAAAQ,CAAiB,IAClB,CAACA,GACA,GAAGR,EAAI,SAAS,IAAI,GAAGQ,CAAgB,KACtC,UAAUC,CAAQ,GAClB,CAACR,EAAaQ,CAAQ,CAC5B,CACJ,CACJ,EAAE,IAAI,CAAC,CAAE,IAAAL,CAAI,IAAMA,CAAG,EAEtB,OAAIC,EAAY,QACdK,EAAO,KAAK,yBAAyBR,CAAQ,KAAKG,EAAY,KAAK,IAAI,CAAC,EAAE,EAEnE,IAGF,EACT,EC1BaM,EACX,CAAC,CACC,IAAAC,EAAM,GACN,MAAAC,EAAQ,GACR,QAASC,EAAS,CAAA,CACpB,IACCd,GAAQ,CACP,MAAMe,EACHf,EAAI,IAAI,OAASY,GAASZ,EAAI,IAAI,SAAWa,GAAU,GAEpDG,EAAgBC,EAAWH,CAAM,EAClCI,GAA0BJ,EAAOI,EAAMlB,EAAI,IAAI,KAAK,EACrDmB,EAAQL,CAAM,EACXI,GACCJ,EAAO,KAAMM,GACXC,EAASD,CAAI,EAAIA,EAAK,KAAKF,CAAI,EAAIE,IAASF,CAC9C,EACF,IAAe,GAEfI,EAAmBtB,EAAI,IAAI,SAAWa,IAAU,QACtD,IAAIU,EAAmB,GAEvB,MAAO,CACL,KAAM,+BAEN,YAAcxB,GAAS,CACjBgB,GAAWQ,GACbzB,EAAkBC,EAAMC,EAAKgB,CAAa,CAE9C,EAEA,cAAe,IAAM,CAGnB,GAFAO,EAAmB,GAEfR,EAAS,CACX,MAAMS,EAAUxB,EAAI,MAAM,IAAKD,GAC7BD,EAAkBC,EAAMC,EAAKgB,CAAa,CAC5C,EAEA,GAAIM,GAAoBE,EAAQ,KAAK,OAAO,EAC1C,MAAM,IAAI,MACR,yEACF,CAEJ,CACF,CACF,CACF"}