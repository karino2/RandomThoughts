{"version":3,"file":"index.js","sources":["../../src/node/lineNumbers/resolveLineNumbers.ts","../../src/node/lineNumbers/plugin.ts","../../src/node/whitespace.ts","../../src/node/collapsedLines/resolveCollapsedLine.ts","../../src/node/collapsedLines/plugin.ts","../../src/node/utils/resolveAttr.ts","../../src/node/codeBlockTitle/plugin.ts"],"sourcesContent":["const LINE_NUMBERS_REGEXP = /:line-numbers\\b/\nconst NO_LINE_NUMBERS_REGEXP = /:no-line-numbers\\b/\nconst LINE_NUMBERS_START_REGEXP = /:line-numbers=(\\d+)\\b/\n\n/**\n * Resolve the `:line-numbers` `:line-numbers=num` / `:no-line-numbers` mark from token info\n *\n * 从 token 信息中解析 `:line-numbers` `:line-numbers=num` / `:no-line-numbers` 标记\n *\n * @param info - Code block info string / 代码块信息字符串\n * @returns Line numbers configuration / 行号配置\n *  - `number` - Start line number / 起始行号\n *  - `true` - Enable line numbers / 启用行号\n *  - `false` - Disable line numbers / 禁用行号\n *  - `null` - No configuration found / 未找到配置\n *\n * @example\n * ```ts\n * resolveLineNumbers('js :line-numbers') // true\n * resolveLineNumbers('js :line-numbers=10') // 10\n * resolveLineNumbers('js :no-line-numbers') // false\n * resolveLineNumbers('js') // null\n * ```\n */\nexport const resolveLineNumbers = (info: string): boolean | number | null => {\n  const lineNumber = LINE_NUMBERS_START_REGEXP.exec(info)?.[1]\n\n  if (lineNumber) {\n    return Number(lineNumber)\n  }\n\n  if (LINE_NUMBERS_REGEXP.test(info)) {\n    return true\n  }\n\n  if (NO_LINE_NUMBERS_REGEXP.test(info)) {\n    return false\n  }\n\n  return null\n}\n","import type { Markdown } from 'vuepress/markdown'\nimport type { MarkdownItLineNumbersOptions } from './options.js'\nimport { resolveLineNumbers } from './resolveLineNumbers.js'\n\n/**\n * Add line numbers to code blocks in markdown-it\n *\n * 为 markdown-it 中的代码块添加行号\n *\n * @param md - The markdown-it instance / markdown-it 实例\n * @param options - Plugin options / 插件选项\n *\n * @example\n * ```ts\n * import { lineNumbers } from '@vuepress/highlighter-helper'\n *\n * md.use(lineNumbers, {\n *   lineNumbers: true,\n *   removeLastLine: false\n * })\n * ```\n */\nexport const lineNumbers = (\n  md: Markdown,\n  {\n    lineNumbers: lineNumberOptions = true,\n    removeLastLine,\n    resolveLineNumbers: customResolveLineNumbers,\n  }: MarkdownItLineNumbersOptions = {},\n): void => {\n  const rawFence = md.renderer.rules.fence!\n\n  md.renderer.rules.fence = (...args) => {\n    const [tokens, index] = args\n    const token = tokens[index]\n    // get token info\n    const info = token.info ? md.utils.unescapeAll(token.info).trim() : ''\n    const rawCode = rawFence(...args)\n\n    const code = rawCode.slice(\n      rawCode.indexOf('<code class=\"language-'),\n      rawCode.indexOf('</code>'),\n    )\n\n    const lines = code.split('\\n')\n\n    if (removeLastLine) {\n      lines.pop()\n    }\n\n    // resolve line-numbers mark from token info\n    const lineNumbersInfo =\n      customResolveLineNumbers?.(info) ??\n      resolveLineNumbers(info) ??\n      (typeof lineNumberOptions === 'number'\n        ? lines.length >= lineNumberOptions\n        : lineNumberOptions)\n\n    if (lineNumbersInfo === false) {\n      return rawCode\n    }\n\n    const startNumbers =\n      typeof lineNumbersInfo === 'number' ? lineNumbersInfo - 1 : 0\n    const lineNumbersStyle = `style=\"counter-reset:line-number ${startNumbers}\"`\n\n    const lineNumbersCode = Array(lines.length)\n      .fill('<div class=\"line-number\"></div>')\n      .join('')\n\n    const lineNumbersWrapperCode = `<div class=\"line-numbers\" aria-hidden=\"true\" ${lineNumbersStyle}>${lineNumbersCode}</div>`\n\n    const finalCode = rawCode\n      .replace(/<\\/div>$/, `${lineNumbersWrapperCode}</div>`)\n      .replace(/\"(language-[^\"]*?)\"/, '\"$1 line-numbers-mode\"')\n\n    return finalCode\n  }\n}\n","/**\n * Regular expression to match `:whitespace` directive in code block info\n *\n * 匹配代码块信息中 `:whitespace` 指令的正则表达式\n */\nexport const WHITESPACE_REGEXP = /:whitespace(?:=(all|boundary|trailing)?)?\\b/\n\n/**\n * Regular expression to match `:no-whitespace` directive in code block info\n *\n * 匹配代码块信息中 `:no-whitespace` 指令的正则表达式\n */\nexport const NO_WHITESPACE_REGEXP = /:no-whitespace\\b/\n\n/**\n * Whitespace position types\n *\n * 空白符位置类型\n */\nexport type WhitespacePosition = 'all' | 'boundary' | 'trailing'\n\nconst AVAILABLE_WHITESPACE_POSITIONS = ['all', 'boundary', 'trailing']\n\n/**\n * Resolve whitespace position from code block info and global option\n *\n * 从代码块信息和全局选项中解析空白符位置\n *\n * @param info - Code block info string / 代码块信息字符串\n * @param globalOption - Global whitespace option / 全局空白符选项\n * @returns Resolved whitespace position or false if disabled / 解析的空白符位置，如果禁用则返回 false\n *\n * @example\n * ```ts\n * resolveWhitespacePosition('js :whitespace=all', 'boundary') // 'all'\n * resolveWhitespacePosition('js :no-whitespace', 'boundary') // false\n * resolveWhitespacePosition('js', 'boundary') // 'boundary'\n * ```\n */\nexport const resolveWhitespacePosition = (\n  info: string,\n  globalOption: WhitespacePosition | true,\n): WhitespacePosition | false => {\n  if (NO_WHITESPACE_REGEXP.test(info)) {\n    return false\n  }\n\n  const defaultPosition = AVAILABLE_WHITESPACE_POSITIONS.includes(\n    globalOption as WhitespacePosition,\n  )\n    ? (globalOption as WhitespacePosition)\n    : false\n\n  const match = info.match(WHITESPACE_REGEXP)\n\n  if (match) {\n    if (AVAILABLE_WHITESPACE_POSITIONS.includes(match[1])) {\n      return match[1] as WhitespacePosition\n    }\n\n    return defaultPosition || 'all'\n  }\n\n  return defaultPosition\n}\n","/**\n * Regular expression to match `:collapsed-lines` directive in code block info\n *\n * 匹配代码块信息中 `:collapsed-lines` 指令的正则表达式\n */\nconst COLLAPSED_LINES_REGEXP = /:collapsed-lines\\b/\n\n/**\n * Regular expression to match `:collapsed-lines=num` directive in code block info\n *\n * 匹配代码块信息中 `:collapsed-lines=num` 指令的正则表达式\n */\nconst COLLAPSED_LINES_START_REGEXP = /:collapsed-lines=(\\d+)\\b/\n\n/**\n * Regular expression to match `:no-collapsed-lines` directive in code block info\n *\n * 匹配代码块信息中 `:no-collapsed-lines` 指令的正则表达式\n */\nconst NO_COLLAPSED_LINES_REGEXP = /:no-collapsed-lines\\b/\n\n/**\n * Resolve the `:collapsed-lines` `:collapsed-lines=num` / `:no-collapsed-lines` mark from token info\n *\n * 从 token 信息中解析 `:collapsed-lines` `:collapsed-lines=num` / `:no-collapsed-lines` 标记\n *\n * @param info - Code block info string / 代码块信息字符串\n * @returns Collapsed lines configuration / 折叠行配置\n *  - `number` - Start line number for collapsing / 折叠起始行号\n *  - `true` - Enable collapsed lines / 启用折叠行\n *  - `false` - Disable collapsed lines / 禁用折叠行\n *  - `null` - No configuration found / 未找到配置\n *\n * @example\n * ```ts\n * resolveCollapsedLines('js :collapsed-lines') // true\n * resolveCollapsedLines('js :collapsed-lines=20') // 20\n * resolveCollapsedLines('js :no-collapsed-lines') // false\n * resolveCollapsedLines('js') // null\n * ```\n */\nexport function resolveCollapsedLines(info: string): boolean | number | null {\n  const lines = COLLAPSED_LINES_START_REGEXP.exec(info)?.[1]\n\n  if (lines) {\n    return Number(lines)\n  }\n\n  if (COLLAPSED_LINES_REGEXP.test(info)) {\n    return true\n  }\n\n  if (NO_COLLAPSED_LINES_REGEXP.test(info)) {\n    return false\n  }\n\n  return null\n}\n","import type { Markdown } from 'vuepress/markdown'\nimport type { MarkdownItCollapsedLinesOptions } from './options.js'\nimport { resolveCollapsedLines } from './resolveCollapsedLine.js'\n\n/**\n * Add collapsed lines functionality to code blocks in markdown-it\n *\n * 为 markdown-it 中的代码块添加折叠行功能\n *\n * @param md - The markdown-it instance / markdown-it 实例\n * @param options - Plugin options / 插件选项\n *\n * @example\n * ```ts\n * import { collapsedLines } from '@vuepress/highlighter-helper'\n *\n * md.use(collapsedLines, {\n *   collapsedLines: 15,\n *   removeLastLine: false\n * })\n * ```\n */\nexport const collapsedLines = (\n  md: Markdown,\n  {\n    collapsedLines: collapsedLinesOptions = 'disable',\n    removeLastLine,\n  }: MarkdownItCollapsedLinesOptions = {},\n): void => {\n  if (collapsedLinesOptions === 'disable') return\n\n  const rawFence = md.renderer.rules.fence!\n\n  md.renderer.rules.fence = (...args) => {\n    const [tokens, index] = args\n    const token = tokens[index]\n    // get token info\n    const info = token.info ? md.utils.unescapeAll(token.info).trim() : ''\n    const code = rawFence(...args)\n\n    // resolve collapsed-lines mark from token info\n    const collapsedLinesInfo =\n      resolveCollapsedLines(info) ?? collapsedLinesOptions\n\n    if (collapsedLinesInfo === false) {\n      return code\n    }\n\n    const lines =\n      code\n        .slice(code.indexOf('<code class=\"language-'), code.indexOf('</code>'))\n        .split('\\n').length - (removeLastLine ? 1 : 0)\n    const startLines =\n      typeof collapsedLinesInfo === 'number' ? collapsedLinesInfo : 15\n\n    if (lines < startLines) {\n      return code\n    }\n\n    const collapsedLinesCode = `<div class=\"collapsed-lines\"></div>`\n    const styles = `--vp-collapsed-lines:${startLines};`\n\n    const finalCode = code\n      .replace(/<\\/div>$/, `${collapsedLinesCode}</div>`)\n      .replace(/\"(language-[^\"]*?)\"/, '\"$1 has-collapsed-lines collapsed\"')\n      .replace(/^<div[^>]*>/, (match) => {\n        if (!match.includes('style=')) {\n          return `${match.slice(0, -1)} style=\"${styles}\">`\n        }\n        return match.replace(/(style=\")/, `$1${styles}`)\n      })\n\n    return finalCode\n  }\n}\n","/**\n * Resolve attribute value from code block info string\n *\n * 从代码块信息字符串中解析属性值\n *\n * @param info - Code block info string / 代码块信息字符串\n * @param attr - Attribute name to resolve / 要解析的属性名\n * @returns The attribute value or null if not found / 属性值，如果未找到则返回 null\n *\n * @example\n * ```ts\n * resolveAttr('js title=\"example.js\"', 'title') // 'example.js'\n * resolveAttr('js title=\\'example.js\\'', 'title') // 'example.js'\n * resolveAttr('js', 'title') // null\n * ```\n */\nexport const resolveAttr = (info: string, attr: string): string | null => {\n  // try to match specified attr mark\n  const pattern = `\\\\b${attr}\\\\s*=\\\\s*(?<quote>['\"])(?<content>.+?)\\\\k<quote>(\\\\s|$)`\n  const regex = new RegExp(pattern, 'i')\n  const match = info.match(regex)\n\n  // return content if matched, null if not specified\n  return match?.groups?.content ?? null\n}\n","import type { Markdown } from 'vuepress/markdown'\nimport { isFunction } from 'vuepress/shared'\nimport { resolveAttr } from '../utils/index.js'\nimport type {\n  CodeBlockTitleRender,\n  MarkdownItCodeBlockTitleOptions,\n} from './options.js'\n\n/**\n * Default title render function\n *\n * 默认标题渲染函数\n */\nconst defaultTitleRender: CodeBlockTitleRender = (title, code) =>\n  `\\\n<div class=\"code-block-with-title\">\n  <div class=\"code-block-title-bar\" data-title=\"${title}\">\n    <span>${title}</span>\n  </div>\n  ${code}\n</div>`\n\n/**\n * Add code block title functionality to markdown-it\n *\n * 为 markdown-it 添加代码块标题功能\n *\n * @param md - The markdown-it instance / markdown-it 实例\n * @param options - Plugin options / 插件选项\n *\n * @example\n * ```ts\n * import { codeBlockTitle } from '@vuepress/highlighter-helper'\n *\n * md.use(codeBlockTitle, {\n *   codeBlockTitle: true\n * })\n * ```\n */\nexport const codeBlockTitle = (\n  md: Markdown,\n  {\n    codeBlockTitle: codeBlockTitleOptions = true,\n  }: MarkdownItCodeBlockTitleOptions = {},\n): void => {\n  if (codeBlockTitleOptions === false) return\n\n  const titleRender: CodeBlockTitleRender = isFunction(codeBlockTitleOptions)\n    ? codeBlockTitleOptions\n    : defaultTitleRender\n\n  const rawFence = md.renderer.rules.fence!\n\n  md.renderer.rules.fence = (...args) => {\n    const [tokens, index] = args\n    const token = tokens[index]\n    // get token info\n    const info = token.info ? md.utils.unescapeAll(token.info).trim() : ''\n    const rawCode = rawFence(...args)\n    const title = resolveAttr(info, 'title')?.trim()\n\n    if (!title) return rawCode\n\n    return titleRender(title, rawCode)\n  }\n}\n"],"names":["LINE_NUMBERS_REGEXP","NO_LINE_NUMBERS_REGEXP","LINE_NUMBERS_START_REGEXP","resolveLineNumbers","info","lineNumber","lineNumbers","md","lineNumberOptions","removeLastLine","customResolveLineNumbers","rawFence","args","tokens","index","token","rawCode","lines","lineNumbersInfo","lineNumbersStyle","lineNumbersCode","lineNumbersWrapperCode","WHITESPACE_REGEXP","NO_WHITESPACE_REGEXP","AVAILABLE_WHITESPACE_POSITIONS","resolveWhitespacePosition","globalOption","defaultPosition","match","COLLAPSED_LINES_REGEXP","COLLAPSED_LINES_START_REGEXP","NO_COLLAPSED_LINES_REGEXP","resolveCollapsedLines","collapsedLines","collapsedLinesOptions","code","collapsedLinesInfo","startLines","collapsedLinesCode","styles","resolveAttr","attr","pattern","regex","defaultTitleRender","title","codeBlockTitle","codeBlockTitleOptions","titleRender","isFunction"],"mappings":"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"}