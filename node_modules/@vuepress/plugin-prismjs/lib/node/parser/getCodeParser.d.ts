/**
 * This module processes the output of prismjs by wrapping each line of code
 * with a `<span class="line">` and provides simple operations for the line node.
 */
export interface OpenTag {
    /**
     * @example <tag
     */
    before: string;
    classList: string[];
    /**
     * @example >
     */
    after: string;
    content: string;
    toString(): string;
}
type LineHandler = (node: OpenTag, index: number) => void;
export interface CodeParser {
    pre: OpenTag;
    code: OpenTag;
    lines: OpenTag[];
    /**
     * Add a handler for each the line `<span class="line">`
     */
    line: (handler: LineHandler) => void;
    /**
     * Get the string representation of the parsed code
     */
    stringify: () => string;
}
/**
 * Parse highlighted code and create code parser
 *
 * 解析高亮代码并创建代码解析器
 *
 * @param html - Highlighted HTML content / 高亮 HTML 内容
 * @returns Code parser instance / 代码解析器实例
 * @example
 * ```ts
 * import { getCodeParser } from '@vuepress/plugin-prismjs'
 *
 * const html = '<pre><code>console.log("hello")</code></pre>'
 * const parser = getCodeParser(html)
 * parser.line((node, index) => {
 *   if (index === 1) node.classList.push('highlighted')
 * })
 * ```
 */
export declare const getCodeParser: (html: string) => CodeParser;
export {};
