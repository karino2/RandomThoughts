import{_ as a,c as r,a as t,o as i}from"./app-CTYZxEMR.js";const s={};function n(o,e){return i(),r("div",null,[...e[0]||(e[0]=[t(`<h2 id="関連wikiname" tabindex="-1"><a class="header-anchor" href="#関連wikiname"><span>関連WikiName</span></a></h2><ul><li><a href="./guash.html">guash</a></li><li><a href="./unimemo.html">unimemo</a></li><li><a href="./uit.html">uit</a></li><li><a href="./コマンドラインツールを書くための言語.html">コマンドラインツールを書くための言語</a></li><li><a href="./photino.html">photino</a></li><li><a href="./FParsec.html">FParsec</a></li><li><a href="./GoFO.html">GoFO</a></li><li><a href="./mdvcat.html">mdvcat</a></li><li><a href="./csvplr.html">csvplr</a></li><li><a href="./FSharpLesson.html">FSharpLesson</a></li><li><a href="./Folang.html">Folang</a> これはFSharpじゃないけど。</li></ul><h2 id="自分のブログ" tabindex="-1"><a class="header-anchor" href="#自分のブログ"><span>自分のブログ</span></a></h2><ul><li><a href="https://karino2.github.io/2020/11/15/how_about_fsharp.html" target="_blank" rel="noopener noreferrer">MacとWindowsの両方で使う雑用コマンドライン言語にF#はどうだろう？ - なーんだ、ただの水たまりじゃないか</a></li><li><a href="https://karino2.github.io/2020/12/10/fsharp_for_zatuyou.html" target="_blank" rel="noopener noreferrer">F#が雑用言語に良い。 - なーんだ、ただの水たまりじゃないか</a></li><li><a href="https://karino2.github.io/2021/02/06/fsx_eval_based_dev.html" target="_blank" rel="noopener noreferrer">F# でのfsxベースの開発 - なーんだ、ただの水たまりじゃないか</a></li><li><a href="https://karino2.github.io/2021/04/25/fsharp_de_photino.html" target="_blank" rel="noopener noreferrer">Create a single binary GUI tool with photino and F# on osx - なーんだ、ただの水たまりじゃないか</a></li><li><a href="https://karino2.github.io/2021/01/25/type_first_development.html" target="_blank" rel="noopener noreferrer">Type-First Developmentが良いという話 - なーんだ、ただの水たまりじゃないか</a></li></ul><p>ほかにもいろいろ書いているがとりあえず。</p><h2 id="外部リンク" tabindex="-1"><a class="header-anchor" href="#外部リンク"><span>外部リンク</span></a></h2><p><strong>言語仕様関連</strong></p><ul><li><a href="https://fsharpforfunandprofit.com/site-contents/" target="_blank" rel="noopener noreferrer">Explore this site - F# for fun and profit</a> fun and profitはとりあえずここから。 <ul><li><a href="https://swlaschin.gitbooks.io/fsharpforfunandprofit/content/posts/list-module-functions.html" target="_blank" rel="noopener noreferrer">F# for fun and profit: Choosing between collection functions</a> 良く見るコレクション周りのhow to <ul><li><a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-listmodule.html" target="_blank" rel="noopener noreferrer">List (FSharp.Core) - FSharp.Core</a> 一覧から真面目に探したい時はこちら。</li></ul></li></ul></li><li><a href="https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/" target="_blank" rel="noopener noreferrer">Language Guide - F# - Microsoft Learn</a> Microsoft Learn</li><li><a href="https://fsharp.org/specs/language-spec/" target="_blank" rel="noopener noreferrer">About F# - The F# Language Specification</a> スペック</li><li><a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-core-printfmodule.html" target="_blank" rel="noopener noreferrer">Printf (FSharp.Core) - FSharp.Core</a> リファレンス、とりあえずprintfのリンクを貼っておく</li><li><a href="https://github.com/dotnet/fsharp/blob/686dcabea0f81eafbf800ec4e7ba6e34580ddf2a/src/Compiler/pars.fsy#L3418" target="_blank" rel="noopener noreferrer">fsharp/src/Compiler/pars.fsy at 686dcabea0f81eafbf800ec4e7ba6e34580ddf2a · dotnet/fsharp</a> パーサーのソース。リファレンスの文法はexpr周りが厳密じゃないので。</li></ul><p><strong>作業開始時の細々とした情報</strong></p><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/fsharp/get-started/get-started-vscode" target="_blank" rel="noopener noreferrer">Get Started with F# in Visual Studio Code</a></li><li><a href="https://karino2.github.io/2021/01/16/ionide_nuget.html" target="_blank" rel="noopener noreferrer">F#でNuGetのライブラリを使う</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/fsharp/get-started/get-started-command-line" target="_blank" rel="noopener noreferrer">dotnet add unimemo.fsproj package FSharp.Data</a> F#でのnugetパッケージの追加</li><li><a href="https://fslab.org/Deedle/" target="_blank" rel="noopener noreferrer">Deedle: Exploratory data library for .NET</a> dataframeっぽい奴。</li><li><a href="https://lorgonblog.wordpress.com/2008/11/28/what-does-this-c-code-look-like-in-f-part-one-expressions-and-statements/" target="_blank" rel="noopener noreferrer">What does this C# code look like in F#? (part one: expressions and statements) « Inside F#</a></li><li><a href="https://learn.microsoft.com/en-us/dotnet/standard/io/common-i-o-tasks" target="_blank" rel="noopener noreferrer">Common I/O Tasks - Microsoft Learn</a> dotnetだけどF# で使うので。</li></ul><h2 id="メモ" tabindex="-1"><a class="header-anchor" href="#メモ"><span>メモ</span></a></h2><p>良く忘れるが、string interpolationはドル</p><div class="language-fsharp line-numbers-mode" data-highlighter="prismjs" data-ext="fs"><pre><code class="language-fsharp"><span class="line">$<span class="token string">&quot;string-text {expr}&quot;</span></span>
<span class="line">$<span class="token string">&quot;string-text %format-specifier{expr}&quot;</span></span>
<span class="line">$<span class="token string">&quot;&quot;&quot;string-text {&quot;embedded string literal&quot;}&quot;&quot;&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ソース: <a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/interpolated-strings" target="_blank" rel="noopener noreferrer">MSDN: Interpolated strings</a></p><h2 id="publishreadytorun" tabindex="-1"><a class="header-anchor" href="#publishreadytorun"><span>PublishReadyToRun</span></a></h2><p>シングルバイナリを作るのに、PublishReadyToRunでAOT出来るぜ、と<a href="https://docs.microsoft.com/en-us/dotnet/core/deploying/single-file" target="_blank" rel="noopener noreferrer">Single file application - .NET - Microsoft Docs</a>に書いてあったので試してみたら、 サイズが36MBから60MBに膨らんでしまう。 60MBは嫌だなぁ、と思い、AOTしないことに。</p><p>前も試した気がするが、メモしておかないとまたやりそうなのでここにメモ。</p><h2 id="argu" tabindex="-1"><a class="header-anchor" href="#argu"><span>Argu</span></a></h2><p>良く使うのでメモしておく。</p><p><a href="https://fsprojects.github.io/Argu/tutorial.html" target="_blank" rel="noopener noreferrer">Tutorial</a></p><h2 id="プロファイラ" tabindex="-1"><a class="header-anchor" href="#プロファイラ"><span>プロファイラ</span></a></h2><p><a href="https://www.codesuji.com/2019/10/13/F-Performance-Profiling/" target="_blank" rel="noopener noreferrer">Performance Profiling F# | codesuji</a> そのうち試したい。</p><h2 id="system-io-compression等の追加" tabindex="-1"><a class="header-anchor" href="#system-io-compression等の追加"><span>System.IO.Compression等の追加</span></a></h2><p>アセンブリに入ってそうなdllってどうやって追加するの？と思ったが、nugetになっていて全部nuget経由で追加するものっぽい。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">$ dotnet add package System.IO.Compression</span>
<span class="line">$ dotnet add package System.IO.Compression.ZipFile</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="streamからのreadalllines的な事をするコード" tabindex="-1"><a class="header-anchor" href="#streamからのreadalllines的な事をするコード"><span>StreamからのReadAllLines的な事をするコード</span></a></h2><p>ZipEntryなどはFiles関連の便利メソッドが使えないので、たまにこの手の処理が必要になる。 終わりまでReadLineする、みたいなwhile的な処理はいまいち書きにくいが、一旦seqを作ってそれをfilterしたりすると簡潔に書ける。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">    use sr = ....</span>
<span class="line">    let lineSeq = seq { while true do yield sr.ReadLine() }</span>
<span class="line">    lineSeq </span>
<span class="line">    |&gt; Seq.takeWhile (fun line -&gt; line &lt;&gt; null) </span>
<span class="line">    |&gt; Seq.toList // do read before sr close.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fable関連" tabindex="-1"><a class="header-anchor" href="#fable関連"><span>Fable関連</span></a></h2><p>なんかgolangのランタイムで動くFSharpみたいな言語無いかなぁ、と思っていて見つけたもの。</p><ul><li><a href="https://github.com/fable-compiler/Fable/pull/3345" target="_blank" rel="noopener noreferrer">Golang (wip) by dbrattli · Pull Request #3345 · fable-compiler/Fable</a><ul><li><a href="https://github.com/fable-compiler/Fable/discussions/3346" target="_blank" rel="noopener noreferrer">Golang · fable-compiler/Fable · Discussion #3346</a></li></ul></li><li><a href="https://go.dev/src/cmd/compile/README" target="_blank" rel="noopener noreferrer">The Go Programming Language</a> golangのコンパイラ周辺のドキュメント。外から使える感じでは無さそうだが、一応メモしておく。</li></ul><p>fableからやると、トランスパイラにdotnetが必要になっちゃうよなぁ。やはり似た言語くらいがいいんじゃないか、という気もする。</p><h2 id="dotnet-fsi" tabindex="-1"><a class="header-anchor" href="#dotnet-fsi"><span>dotnet fsi</span></a></h2><p>たまに使おうとすると忘れているが、コマンドラインでちょろっと試すなら、dotnet fsiとする。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">$ dotnet fsi</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,35)])])}const h=a(s,[["render",n]]),d=JSON.parse('{"path":"/FSharp.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1740715540000,"contributors":[{"name":"Kazuma Arino","username":"","email":"hogeika2@gmail.com","commits":24}],"changelog":[{"hash":"3fdaf613fe3a05d5a25e7ee9ce07e90c22cd83e2","time":1740715540000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"5241728fa5b08107759aa7442ee4962d6a6d425f","time":1738599860000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"f0ce1c1e7409ab779d8006d24b4781e206932329","time":1738404343000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"880f3042dad303a88525d1224923d6e783373c6a","time":1738390019000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"a4c24b68b9287e3ef7b5d51138e53e10f79cca2b","time":1737471938000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"3f708808bdb797c5e954661f149eb12b97a018b4","time":1737454463000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"27827016e9f24608e136d087e02cb27803851550","time":1737255943000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"b90f11a509e10ad1f9fce55d1ef7c71e7d7ec2d2","time":1736525140000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"31b6cc3f062b8d4c0a3dbe23589d688f8d63f474","time":1736517936000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"8299f66fa97476b30f520fdca4cd843fe539fecd","time":1734869143000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"04cc86cd0f92f1b275f1a93a8a7c6985611f3870","time":1663495605000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"f7d24ae0f80d2aa60443fcc642fde5643b36ceae","time":1660359493000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"88db77ca50a06d6e9b7d52d0644dddbfb94d1d0f","time":1658964233000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"c6ac20eb8a4719bdca86ef60538c6a146476dec9","time":1658392706000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"1e5e1a249df377efb289b64bc5f3086737a29b2b","time":1656806253000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"a201ae18616072aab95685479981790c7e8a279e","time":1646706577000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"c5b077764c82c861fd2b26044b9e273137d982fc","time":1643875619000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"bb4c84e331565a36f9a7c50bbce33f82db47553e","time":1643874659000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"55e118c019dc437135f2052b6d677d617dd73c8b","time":1643551868000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"c7532ea9aa9e8bb042b8a1f4d42f033a28c5940c","time":1643354938000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"ec7b14e7ee257ec6d5eb2bfcfa626f2ef20eda22","time":1641790997000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"1aeaf58e8dd62d61c39b685e4ad2d0dbfc3695d3","time":1641707919000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"f091efe9891520cc6f432708cfae776268823b49","time":1641622347000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"278f85d2b4d356cbb9b043004236eb366296f84e","time":1641617242000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"}]},"filePathRelative":"FSharp.md"}');export{h as comp,d as data};
