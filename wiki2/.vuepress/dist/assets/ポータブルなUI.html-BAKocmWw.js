import{_ as e,c as p,a as i,o as l}from"./app-CTYZxEMR.js";const h={};function s(n,a){return l(),p("div",null,[...a[0]||(a[0]=[i('<p><a href="./技術的なメモ.html">技術的なメモ</a></p><p>なぜUIはポータブルにならないのか、どうにか出来ないか？みたいな事を考えてみたい。 この問題は20年前くらいに考えた時には良い答えが見つからなかったが、今でも見つからないだろうか？</p><h2 id="コンテキスト" tabindex="-1"><a class="header-anchor" href="#コンテキスト"><span>コンテキスト</span></a></h2><p>Qtのコードがあって、これをiOSで動かしたい、みたいな話はよく見かけるが、全然うまく行かない。なんでこんなうまく行かないのか？ そもそもUIって、どのプラットフォームでもだいたい同じような事を書きたいのだから、同じコードに出来ないものなんだろうか？</p><h2 id="uiプログラムを考える" tabindex="-1"><a class="header-anchor" href="#uiプログラムを考える"><span>UIプログラムを考える</span></a></h2><p>例えばリソースを書いてメニューを追加して、そのメニューが選ばれたらなにかしたい。 それはだいたいどの環境でも同じような仕組みがある。</p><p>ただグレーにしたりチェックにしたり階層化したり、と細々な違いがあって、それらのやり方は結構違う。</p><p>ダイアログにボタンとテキストエリアとカスタムなカラーピッカーを置きたいとする。 レイアウトの方法はプラットフォームで全然違う。</p><p>カラーピッカーの所はカスタムコントロールの作り方で、これまた全然違う。 一方で画面に描きたいもののロジックや、押された座標に対してやりたい事はどのプラットフォームでも同じだ。</p><p>モーダルダイアログの扱いも環境によって大きく違うし、結果の受け取り方もだいぶ違う。</p><p>一方でやりたい事はどの環境でもだいたい一緒だ。</p><p>なんか明らかに共通化出来ると感じるのに、全然うまく行かない。</p><h2 id="共通部分を抜き出す-のでは何が駄目か" tabindex="-1"><a class="header-anchor" href="#共通部分を抜き出す-のでは何が駄目か"><span>共通部分を抜き出す（のでは何が駄目か）</span></a></h2><p>割と簡単に思いつく事として、UIのプラットフォームに依存しない部分をポータブルに書いておいてそれを共有して、 各プラットフォームではこれを使えばいい。これはまぁみんなやってる。</p><p>これを限界までUI側まで共通化していけば、ほとんど共通になるのではないか？という考えはどうだろう？</p><p>この考えが意外とうまく行かないのは、ユーザーとのやりとりのロジックというのは、UIと深く結びつきがちで、 これを無理に引き離そうとするとコードが面倒になりすぎてしまう。 そしてやりとりのロジックを含まない所だけ共通化、というのは、その範囲に含まないものが結構多くなってしまう。 これを各環境ごとに書くのは嫌だ。</p><h2 id="uiは結構面倒くさい-からさらに面倒にはしたくない" tabindex="-1"><a class="header-anchor" href="#uiは結構面倒くさい-からさらに面倒にはしたくない"><span>UIは結構面倒くさい（からさらに面倒にはしたくない）</span></a></h2><p>UIのコードというのはそれ自体結構面倒くさい。だからさらにそれを面倒にするような事はあまりしたくない。 例えば共通部分になにかを書いて、それと同じような事を各環境側にも書かなきゃいけない、みたいなのはきっとうまく行かない。</p><p>普通に特定のプラットフォームでUIを開発するのと同程度の面倒さで開発出来ないと駄目な気はする。</p><p>例えばなんか共通の抽象クラスみたいなのでコードを書いて各環境でその実装クラスを書かなきゃいけない、 みたいなのは、新たなものを追加するのがかったるいのでうまく行かないような気はする。</p><h2 id="ui用の言語を考えてみる" tabindex="-1"><a class="header-anchor" href="#ui用の言語を考えてみる"><span>UI用の言語を考えてみる</span></a></h2><p>言語でうまくいくとは思わないのだが、抽象度を上げて書けば良いような気はなんとなくするので、UI用言語みたいなのを考えてみたい気もする。 なんか駄目そうな路線ではあるが、なんで駄目そうに感じるのかも言語化しておく意義はあるかもしれない。</p><p>XMLのようなものを書いてそれからUIを生成する、みたいなのは既にあるが、そういうのでは全然駄目な複雑なUIを書きたい。 だから宣言的なものではなくて、もっと普通にロジックを書きたい。 interface builderくらいじゃ全然駄目なんだよな。</p><p>FlutterとかReactNativeなどは、自分らの用途だと、普通にUIを書くのとは遠いのがいまいちに思う。 普通にC++でネイティブの環境でUIを書いているように書きたいと思う。 だからUI用の言語というアイデアは駄目そうに感じるんだろうな。</p><p>話を戻して。 何かUIとそのロジックを記述する理想的な言語があったとして、そこからQtとかUIKitのコードやリソースを生成すると考えると、 その理想的な言語はどういう感じになるだろうか？</p><p>まずUIと絡み合ったロジックはC++で書きたい気がする。 でもC++のテンプレートとかでどうにかなる気も、どうにかしたい気もあまりしない。 なんかそういうのじゃ駄目だよなぁ。</p><p>Qtのプログラミングくらいでいいんだが、もうちょっと抽象化されてて欲しいんだよな。 そして抽象化されてほしくない所はC++で直接書きたい。</p><p>流れるインターフェースくらいでそれっぽい記述をする、とかにならないかなぁ？ それではリソースが生成されないから駄目だな。 なんかリソースも生成されつつ、UIのコードも書けつつ、オーナードロー的な部分やマウスのイベントなどが抽象化されてて欲しいんだよな。</p><p>しかもダイアログなどでは、前回開いた時の位置やサイズを覚えておいて欲しい時とそうでない時とかある訳だ。 そういうものも何か指定したいのだが、いちいちそういうやり方を覚え直すのも大変だよなぁ。</p><p>ロジックをC++で書きたい、というのがいろいろ厳しいよなぁ。</p><p>うーん、言語を考えてみようとしたがうまく考えられない。</p><h2 id="必要なものを考える" tabindex="-1"><a class="header-anchor" href="#必要なものを考える"><span>必要なものを考える</span></a></h2><ul><li>カスタムコントロール <ul><li>Draw</li><li>イベント</li><li>外部とのやりとり</li></ul></li><li>レイアウト <ul><li>Vertical, Horizontal</li></ul></li><li>メニュー</li><li>dockするペイン的なもの</li><li>タイトルバー</li><li>ステータスバー</li><li>ボタン、リストなどの普通のコントロール</li></ul><p>もっといろいろあるな。やはり膨大だ。なんか最大公約数的な共通の何かを作って各環境で実装するみたいなのが出来る気はしない。 なんかそういうのではなくて、基礎となるものがあったらそこから先は作っていきながら広めていける何かになってないと駄目だよなぁ。</p><h2 id="ユーザーとのやり取りを考える" tabindex="-1"><a class="header-anchor" href="#ユーザーとのやり取りを考える"><span>ユーザーとのやり取りを考える</span></a></h2><p>UIは何が面倒ってUIとロジックが結びついている所だ。</p><ul><li>ダイアログでドロップダウンなどがあるのを出す</li><li>ドロップダウンの選ばれたものに応じてdisableになったり他のリストの中身が変わったりする</li><li>ユーザーが選んだものに応じて次の出すUIが違ったりする</li><li>ユーザーとは関係ない事情で出すものが違ったりもする（ファイルに保存しようとしたらファイルが既にあった、とか）</li></ul><p>こうしたロジックはかなり複雑なので、やはりプログラムである必要がある。</p><p>ボタンが押された時に実行したい処理などはだいたい同じなのだが、他のコントロールの状態を変えたい、とかだとプラットフォーム依存になってしまう。</p><h2 id="なんかir的なものからどうにかならんか" tabindex="-1"><a class="header-anchor" href="#なんかir的なものからどうにかならんか"><span>なんかIR的なものからどうにかならんか？</span></a></h2><p>イマドキっぽい考え方だと、IR的なものから生成出来ないかしら？ 流れるインターフェース的なのでIR的なツリーを生成して、 これを元にC++のコードとリソースが生成される。</p><p>これはC++の中で行われて、このIR的な何かとのやり取りが統一的な形で書ければ、徐々に置き換えていく感じに出来ないものか？</p><p>でも例えばQtの場合、ヘッダに特殊なdefineを置いてmocに掛けたりする必要があって、それはCMakeとかqmakeに影響を与える。 だからプリプロセスで.hや.cppファイルを生成するのは避けられない。 XcodeでもやはりXcodeのプロジェクトに生成される方が取り回しはいいから避けられないよなぁ。</p><p>cppで書くけれどプリプロセス、かぁ。なかなか地獄だな。</p><h2 id="なるべくネイティブ開発に近い開発" tabindex="-1"><a class="header-anchor" href="#なるべくネイティブ開発に近い開発"><span>なるべくネイティブ開発に近い開発</span></a></h2><p>変に遠い抽象がいろいろ挟まるのではなく、むしろネイティブでそのまま開発するのになるべく近い開発にしたい。</p><p>近いというのは幾つかの意味があるが、まずこのシステムでUIを書くと、ネイティブのどういうコードが動くかがすぐに分かるのが望ましい。 そうすれば、ネイティブでUI開発の経験がありさえすれば、すぐに理解して使っていけるようになるから学習コストが低くて済む。 また、mocやqmakeなどの面倒な仕組みにそのまま乗っかれるためにも、実際に手で同じようなのを書いたらこうなる、 というのがわかりやすいものになっていて欲しい。何をmocに加えたらいいのか、などが、見たらすぐに明らかになっていて欲しい。</p><p>理想的にはネイティブのコントロールを隠すのではなくて、ネイティブのコントロールの開発をする便利ライブラリのように使えるものが良い。 ネイティブのコントロールを開発するのにそれを使っていると、意外とネイティブ特有の部分は多くなくてそのライブラリ内でいろいろ書けるようになって、 その部分は他のプラットフォームにも持っていけるので共通部分が増えていく、みたいなのがいい気がする。 レイアウトのリソースだとかそういうものをまずはそのままプラットフォームのものを使いつつこのシステムを部分的に採用していって、 だんだんとプラットフォーム固有の部分を減らしていって共有部分を増やしていきたい。</p><p>また、いざとなったらプラットフォームに降りていけるように、間が薄いというのも重要に思う。 最初から全部をポータブルに書くのはポータブルな層が不足していると出来ない事が出てきて困るので、 とりあえず何か分からなかったらプラットフォームのコントロールに降りて書けば良い、というものになっていて欲しい。</p><h2 id="ツリーとハンドラ" tabindex="-1"><a class="header-anchor" href="#ツリーとハンドラ"><span>ツリーとハンドラ</span></a></h2><p>なんかポータブルなツリーのデータ構造を作り、それに対応したネイティブのコントロールを作る。 そしてイベントハンドラはツリーにぶら下げたものを使う感じにする、という事でどうだろう？ その他なるべく多くの操作をツリーの方経由でやるようにする、みたいな。</p><p>コントロール単位で採用出来るようになっていれば、順番に試していける気がするし、まずはそのコントロールで使っているものだけを対応すれば良い。</p><h2 id="_2つの道具が必要" tabindex="-1"><a class="header-anchor" href="#_2つの道具が必要"><span>２つの道具が必要</span></a></h2><p>必要なのは以下の２つの道具に思う。</p><ol><li>ネイティブのウィジェットを作るのに共通のコードが使える仕組み</li><li>作ったネイティブのウィジェットを操作するコードを共通にする仕組み</li></ol><p>そしてこの両者は、部分的な採用が出来るようなものであって欲しい。</p><p>基本的にはネイティブのアプリを書く。 けれどそれを書く時に使える道具がいろいろとある。 そして用意したウィジェットに対してのロジックも共通化したければ出来る。 しなくて良いようなのはプラットフォームごとに書いても良い。 ロジックとUIのやりとりが複雑な所は共通化して使えるようにしたい。</p><p>逆にこの２つが達成出来たら、あとは既存のコードを順番に置き換えていけば良い。</p>',58)])])}const t=e(h,[["render",s]]),c=JSON.parse('{"path":"/%E3%83%9D%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB%E3%81%AAUI.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1733151945000,"contributors":[{"name":"Kazuma Arino","username":"","email":"hogeika2@gmail.com","commits":5}],"changelog":[{"hash":"8741c2ce136a15f0908d15b883cdf9d03ce1ec41","time":1733151945000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"4d1d3c3d091e6200539f11cee74ee055e2c80646","time":1733022342000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"35002f832aa5a1711e125930fa801c875fae5201","time":1732968563000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"5d5e4443288817490895095c45f72620ebf102e9","time":1732897979000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"9f4847f50f12229179eee239c8ed45e95dc26ce2","time":1732892740000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"}]},"filePathRelative":"ポータブルなUI.md"}');export{t as comp,c as data};
