import{_ as e,c as i,a as n,o as p}from"./app-CHiHTJW6.js";const r={};function s(h,a){return p(),i("div",null,[...a[0]||(a[0]=[n('<p>自分の考えたAndroidアプリのアーキテクチャ。Unix like File And Syncの頭文字をとってUFASアーキテクチャと呼びたい。 ユーファスと読む。</p><h2 id="ufasアーキテクチャで作られたアプリ" tabindex="-1"><a class="header-anchor" href="#ufasアーキテクチャで作られたアプリ"><span>UFASアーキテクチャで作られたアプリ</span></a></h2><ul><li>[[てきすとでっき]]</li><li>[[てきすとTL]]</li><li>[[PngNote]]</li><li>[[TeFWiki]]</li><li>[[カキオク]]</li><li>[[いつなに]]</li></ul><h2 id="基本的な考え" tabindex="-1"><a class="header-anchor" href="#基本的な考え"><span>基本的な考え</span></a></h2><p>概ね以下のようなアーキテクチャ</p><ul><li>Unix的なプレーンなファイルをStorage Access Frameworkで保存</li><li>ネットワークのpermissionはアプリには無しで、ローカルに保存し、[[Syncthing]]などのフォルダsyncのアプリでPCと共有</li></ul><p>以下この二つの要素を説明していく。</p><h2 id="unix的なプレーンなファイルをstorage-access-frameworkで" tabindex="-1"><a class="header-anchor" href="#unix的なプレーンなファイルをstorage-access-frameworkで"><span>Unix的なプレーンなファイルをStorage Access Frameworkで</span></a></h2><p>まずアプリのストレージとしてデータベースやdata下をなるべく使わずに、プレーンなファイルとディレクトリをなるべく使う。 テキストならプレーンテキスト、画像ならpngなど、なるべく普通のファイルを使う。</p><p>プレーンテキストもjsonなどでは無く、行指向のデータだけを素直にもったもの。 ファイルの中にメタ情報はなるべく入れずに、メタ情報はファイル名やディレクトリ構造になるべく反映させる。</p><p>保存はStorage Access Frameworkを使って特別な権限は無しでユーザーにコントロールさせる。</p><h2 id="アプリにネットワークpermissionを持たせないでフォルダsyncアプリを使う" tabindex="-1"><a class="header-anchor" href="#アプリにネットワークpermissionを持たせないでフォルダsyncアプリを使う"><span>アプリにネットワークpermissionを持たせないでフォルダsyncアプリを使う</span></a></h2><p>Unix的なプレーンファイルをローカルに保存してフォルダsyncでPCと共有する、これが基本的なUFASアーキテクチャの考えとなる。 このおかげで、アプリ自体はネットワークのコードが必要無い。</p><p>このように作る事で最初からオフライン機能が自然と提供でき、セキュアでアプリのメンテナンスも容易で、 バックアップなどの管理も容易になり、新しいデバイスに乗り換える時にも個々のアプリのアカウントの設定などが不要になる。</p><h2 id="色々なメリット" tabindex="-1"><a class="header-anchor" href="#色々なメリット"><span>色々なメリット</span></a></h2><p>UFASアーキテクチャには数々のメリットがある。すでにここまでの解説でも幾つか触れたが、以下にまとめてみたい。 なお、いくつかの項目はお互いに関連しているので重複した説明も入ってしまっている。</p><h3 id="アプリのメンテナンスが容易" tabindex="-1"><a class="header-anchor" href="#アプリのメンテナンスが容易"><span>アプリのメンテナンスが容易</span></a></h3><p>Androidのアプリはメンテナンスが大変である。Androidのバージョンが変わるごとに多くの変更が必要になって、 何もしてなくてもちゃんと動く事を保証するだけでかなりの労力が必要となる。</p><p>その多くはネットワークのコードに起因する。 ネットワークはセキュリティ的にも問題が起きやすい所なので、Androidのバージョンが上がる都度多くの変更がある。 それらに追随してセキュアに保ち続けるのはなかなか大変である。</p><p>Storage Access Frameworkは最近はかなり安定してきたので、あまり変更も多くなくなってきた。 だからAndroidのバージョンをあげてもあまり変更が必要にならない。</p><p>UFASアーキテクチャならアプリ自体にはネットワークのコードを含まないのでこうしたメンテナンスのコストが無い。 これはAndroidのアプリというメンテナンスが大変な分野において、重要なメリットとなる。</p><h3 id="セキュアに作りやすい" tabindex="-1"><a class="header-anchor" href="#セキュアに作りやすい"><span>セキュアに作りやすい</span></a></h3><p>フォルダsyncはやる事が単純であるが故に非常に堅牢に作りやすく、また実際に多くのフォルダsyncアプリは堅牢に出来ていると思う。 ネットワークをこのネットワークを専門にしたアプリに任せる、というのは、セキュアなシステムになりやすい。</p><p>フォルダsyncはグローバルなインターネットに出る必要が無いようにも設定できるので、 この場合は秘匿したいプライベートなデータをインターネットを通らなく出来、流出のリスクが下がる。 サーバーも不要なため、サーバーをexploitされるリスクも無い。</p><p>Storage Access Frameworkもバージョンを重ねた枯れたシステムなのでセキュリティ的にも信頼出来る。</p><h3 id="開発がインクリメンタルに行いやすい" tabindex="-1"><a class="header-anchor" href="#開発がインクリメンタルに行いやすい"><span>開発がインクリメンタルに行いやすい</span></a></h3><p>Unix的なファイルというものは、スクリプトでの操作が容易だ。だから最初の段階ではとりあえずアプリで保存だけ作ってしまえば、 加工的な事はPCで行う、という分業がやりやすい。</p><p>こうした小さなスクリプト群にわかれたシステムが開発やメンテナンスのしやすさに優れて堅牢に作りやすいのは、 クラウドなどの仕事をしている人には広く知られている事と思う。</p><p>最初にサーバー側を用意しないで始められるのもUFASアーキテクチャの特徴に思う。 これも最低限動くものを作って、コンセプトの正しさを確認していく事を容易にしていると思う。</p><p>Androidのアプリはとりあえず使える所までの敷居が高いと思う。 そこをなるべく低くするのは小さく始めるというソフトウェア開発の原則においてとても重要な事で、 UFASアーキテクチャは最も小さくアプリの開発を始める方法を追及したものと言える。</p><h3 id="アプリごとのアカウントが不要" tabindex="-1"><a class="header-anchor" href="#アプリごとのアカウントが不要"><span>アプリごとのアカウントが不要</span></a></h3><p>アプリの数を増やす時に、アカウントの設定というのは大きな手間だ。 スマホなどは定期的に端末を乗り換える、という事が起こるし新たなデバイスが追加される事も多い。</p><p>こうした時にアプリごとにアカウントの設定が必要になると、多くのアプリを使うのが面倒になる。</p><p>UFASアーキテクチャなら[[Syncthing]]などの設定を一回行えれば、個々のアプリはフォルダを指定するだけで、面倒がない。</p><p>そのおかげで小さなアプリをたくさん使うのが容易になるので、アプリを小さく作りやすい。 小さいアプリはメンテナンスも容易になるので、先に述べたメンテナンスの容易さにも寄与することになる。</p><h3 id="データが長期間安定しやすい" tabindex="-1"><a class="header-anchor" href="#データが長期間安定しやすい"><span>データが長期間安定しやすい</span></a></h3><p>Unix的な哲学にしたがってシンプルに設計したデータフォーマットは、あまり変更の余地が無いくらい単純に出来る事が多い。 そうしたフォーマットは最初に決めたら、割とそのまま変更の必要が無い事も多い。 アプリ自体がどんどん変更されていても、データ自体のフォーマットはそのままになる。</p><p>これは元々Unix的な哲学に則ってフォーマットを設計すると、出来る事にかなり制約があるせいでもある。 こうした形に上手く表現出来ない機能はなるべく無くす、という設計圧力がUFASアーキテクチャにはある。</p><p>もちろんテキストファイルにjsonを保存するようにするなど、部分的に逸脱すればこれらの制約は回避できる。 その結果としてここで挙げているようなメリットの一部を失う事にもなるが、そうしたトレードオフを意図的に選択出来る、 というのがメリットと言える。</p><p>また、プレーンテキストやpngファイルなど自体はかなり安定したフォーマットなので、それが専用のツールが無くとも長期間使えるものである事は期待できる。</p><p>ツールの開発を終えてもデータはそのまま使える事が期待できる。</p><h3 id="データの独立性が高まる-他のアプリと連携しやすい" tabindex="-1"><a class="header-anchor" href="#データの独立性が高まる-他のアプリと連携しやすい"><span>データの独立性が高まる（他のアプリと連携しやすい）</span></a></h3><p>Unix的なファイルというのは他のツールからも操作しやすい。 同じデータを扱うPC用の[[Electron]]のアプリを作るのは多くの場合容易だし、実際自分も良く作っている。 エディタの拡張などで扱う事もしやすい。</p><p>こうしたヘテロジーニアスな環境のそれぞれで共通のデータを扱いやすいというのも大きな強みと言える。</p><p>またデータ自体が他のアプリに開かれている結果、アプリ自体の開発が終わったり寿命がきても、データはその後も使い続ける事が出来る。</p><p>また、当然ながらサーバーやサービスへのロックインというのも必要最小限で済む。</p><p>例えば今フォルダsyncには[[Syncthing]]を使っているが、機能が単純なのでいつでも他のシステムに乗り換える事が出来る。</p><p>また、公開にはスクリプトでデータを加工して[[GithubPages]]で公開しているものが多いが、 これもスクリプトを変更すれば他のサービスに乗り換える事はいつでも出来る。 データ自体はこれらに依存していないので、これらのサービスの寿命よりも長く生きる事が期待出来る。</p><h3 id="データのメンテナンスが容易" tabindex="-1"><a class="header-anchor" href="#データのメンテナンスが容易"><span>データのメンテナンスが容易</span></a></h3><p>バックアップはそのままUSBハードディスクにコピーすれば良いしgitで管理したりgithubに公開したりGoogle Driveに置いたり、 柔軟な運用が可能。</p><p>また、プレーンなファイルはアプリを必要とせずに閲覧、編集が出来るので、PC上でちょっとした変更などを後から行うことも出来るし、 適当な書き捨てスクリプトで操作する事も出来る。 これはアプリやシステム（Androidなど）の寿命が尽きた後でもメンテナンスが行える事が期待できる。</p><h2 id="関連する考え" tabindex="-1"><a class="header-anchor" href="#関連する考え"><span>関連する考え</span></a></h2><ul><li><a href="https://karino2.github.io/2020/12/12/textdeck.html" target="_blank" rel="noopener noreferrer">メモアプリ、「てきすとでっき」を作った。その思想など。 - なーんだ、ただの水たまりじゃないか</a></li><li><a href="http://0xcc.net/unimag/1/" target="_blank" rel="noopener noreferrer">横着プログラミング 第1回: Unixのメモ技術</a></li><li>[[【書籍】TheArtOfUnixProgramming]]</li><li>[[Unix的GUIツール]]</li></ul>',53)])])}const c=e(r,[["render",s]]),t=JSON.parse('{"path":"/UFAS%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1682995911000,"contributors":[{"name":"Kazuma Arino","username":"","email":"hogeika2@gmail.com","commits":5}],"changelog":[{"hash":"09448a03ff4a2ed5f2c78f6971f15dbb3b2cc471","time":1682995911000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"75ebaa24c5a807f49000cd03946eacb02b2ea740","time":1681522306000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"8a3fb2e8f3e32612030e33ee803746f5a3d8cd97","time":1681521764000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"e7fa862489acb86ed10c175730a550ee6e0dca54","time":1681520723000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"cd8064a559561e9fc67e45ed35d80f0c2744fad9","time":1681520059000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"}]},"filePathRelative":"UFASアーキテクチャ.md"}');export{c as comp,t as data};
