import{_ as e,c as r,a as o,o as t}from"./app-CTYZxEMR.js";const l={};function n(i,a){return t(),r("div",null,[...a[0]||(a[0]=[o('<ul><li><a href="https://github.com/karino2/Calclark" target="_blank" rel="noopener noreferrer">github: karino2/Calclark</a></li><li><a href="https://play.google.com/store/apps/details?id=io.github.karino2.calclark" target="_blank" rel="noopener noreferrer">Calclark - Apps on Google Play</a></li></ul><p>Calclarkとは、<a href="./Starlark.html">Starlark</a>を電卓っぽく使えるようにしたAndroidアプリである。 電卓として使う為に<code>**</code>のサポートなど、一部<a href="./Starlark.html">Starlark</a>とは変更した部分があるforkである。</p><p>CalclarkはStarlarkの方言の言語名であると同時にAndroid版のアプリ名でもある。</p><h2 id="コンセプト" tabindex="-1"><a class="header-anchor" href="#コンセプト"><span>コンセプト</span></a></h2><p>pH計算などをしていると、既存の電卓アプリはどうも使いにくい。 長い計算だとテキスト編集が出来るようなモード\bで使いたいが、 電卓のこうしたモードはexpとかlogとかの仕様が電卓ごとに微妙に違っていて、lnなのかlogなのかとか指数乗の記号が違ったりとか、演算子の優先順位が少し不安になったりだとか、 そういった事をいちいち調べるのも面倒だし、電卓の方がメインでテキストモードはおまけという扱いがほとんどで作りもいまいち。</p><p>そういう訳でPCのターミナルでPythonのreplを動かして計算をしていたのだが、PCで問題文を見つつPCで過去のノートのWikiを見直しつつ同じ画面で計算のターミナルも見て…とやるのはなかなか煩わしい。 電卓っぽく使えるreplがスマホで動けばそれでいいんだけど…と思い作ったのがCalclark。</p><p>基本的にPythonと同じAPIにする事でPythonの知識でそのまま使えるし、分からない事もPythonでググったりPythonのhelpを見れば詳細なドキュメントがあるので、謎の電卓の仕様を調べなくて済む。</p><h2 id="使ってみた感想" tabindex="-1"><a class="header-anchor" href="#使ってみた感想"><span>使ってみた感想</span></a></h2><p>Jupyterを真似て<code>_</code>と<code>__</code>と、<code>Out[0]</code>とかの配列に過去の結果を入れる機能を入れたら、化学の計算にはかなり良い。</p><p>テストで問題解くのに使ってみるとだいたい<code>_</code>しか使わないけれど、これが式の中の好きな場所に置けるのが良いね。 だいたい設問が誘導になっていて、前の結果を使って次の数値を求めるというパターンが多いので、 履歴が好きに参照出来るというのはとても良い。</p><p>平衡計算まわりでは自然対数と常用対数は両方使うので、この辺がPythonなのは新しく覚えなくてよくていいね。 不安になったらターミナルでPythonのhelp見れば良い。 化学の計算にはすごく良いアプリだなぁ。</p><h2 id="開発記録" tabindex="-1"><a class="header-anchor" href="#開発記録"><span>開発記録</span></a></h2><p>ここに開発の過程のメモを記しておく。</p><h3 id="はじまり" tabindex="-1"><a class="header-anchor" href="#はじまり"><span>はじまり</span></a></h3><p><a href="./Starlark.html">Starlark</a>を電卓っぽく使えるAndroidアプリを作ろうと思う。 ただ、Java版のStarlarkは<code>**</code>が無かったりmathモジュールが無かったりするので、forkする必要がありそう。</p><p>という事で名前もStarlarkから変えた方がいいかという事でCalclarkという名前にする。 CalclarkはStarlarkの方言の言語名であると同時にAndroid版のアプリ名でもある。</p><p><a href="./Starlark.html">Starlark</a>側に書いたように、ビルドをして動くところまで来た。という事でとりあえずWikiNameを作る。 今後の方向性としては、</p><ol><li><code>**</code>に対応</li><li>関数の追加方法を調べる</li><li>mathに対応（とりあえず最初から<code>from math import *</code>した状態としてしまって良いだろう）</li></ol><p>という感じで良かろう。 mathはとりあえず普段edXでやってるpH計算の課題が出来る所だけつけたらとりあえずUIの整備に移る。</p><h3 id="関数の登録方法を調べる" tabindex="-1"><a class="header-anchor" href="#関数の登録方法を調べる"><span>関数の登録方法を調べる</span></a></h3><p>Examples.javaに関数の追加の例があるので、まずこれが動くのかを試すかな。</p><p>試す順番。</p><ul><li><s>Javaレイヤーで関数を作って登録して動くか確認</s></li><li><s>Kotlin側で関数を作って登録して動くか確認</s></li></ul><p>あっさり出来た。次は<code>**</code>を対応すればとりあえず最低限は終わるな。</p><h3 id="に対応" tabindex="-1"><a class="header-anchor" href="#に対応"><span><code>**</code>に対応</span></a></h3><p>いちいちUIでテストするのもかったるいので、instrumentedTestを書くかなぁ。</p><p><a href="https://docs.python.org/3/reference/expressions.html" target="_blank" rel="noopener noreferrer">6. Expressions — Python 3.10.0 documentation</a> の6.5の周辺にpowerの優先順位などの記述がある。</p><p>StarlarkのParser.javaを眺めていると、u_exp相当のものが無いな。それっぽいのを作って、parsePrimaryWithSuffixの所をこれに置き換えよう。＞出来た</p><p>ここまでで言語側はとりあえず完成として、UIの真面目な開発に移ろう。</p><h3 id="_2021-11-06" tabindex="-1"><a class="header-anchor" href="#_2021-11-06"><span>2021-11-06</span></a></h3><p>最低限のUIを実装してみる。おしゃれ感はゼロだが、とりあえず使えるようにはなった。 少しつついてみて使い物になるかをまずは調べてみよう。</p><p>テキストでのexportを実装したい気もするが、それは最後でいいかな。</p><h3 id="todo-既に終えた" tabindex="-1"><a class="header-anchor" href="#todo-既に終えた"><span>TODO (既に終えた)</span></a></h3><ul><li>自前ボタンの電卓とテキストのモード切り替え出来るようにする。 <a href="https://stackoverflow.com/questions/58875567/how-to-create-rounded-border-button-using-jetpack-compose" target="_blank" rel="noopener noreferrer">android - How to create rounded border Button using Jetpack Compose - Stack Overflow</a></li></ul><p>以下はいまいちなので上のTODOに統合</p><ul><li>最初にフォーカス当てる。</li><li>IMEを数字モードに出来ないか？ <a href="https://stackoverflow.com/questions/3544214/edittext-with-number-keypad-by-default-but-allowing-alphabetic-characters" target="_blank" rel="noopener noreferrer">android - EditText with number keypad by default, but allowing alphabetic characters - Stack Overflow</a>　無理そう。英語モードのボタンを置くしか無さそうだなぁ。 <a href="https://stackoverflow.com/questions/25219855/how-to-show-android-keyboard-with-symbols-mode-by-default" target="_blank" rel="noopener noreferrer">How to show Android keyboard with symbols mode by default? - Stack Overflow</a></li></ul><h3 id="電卓モードをつける-2021-11-09" tabindex="-1"><a class="header-anchor" href="#電卓モードをつける-2021-11-09"><span>電卓モードをつける(2021-11-09)</span></a></h3><p>IMEのモードが数字から文字に戻っちゃうのが気に食わないので、数字だけを入力する電卓っぽいUIを手で書く事にした。 テキストモードとはユーザーがラジオボタンで明示的に変更する。 いい感じ。</p><h3 id="sumを実装する-2021-11-12" tabindex="-1"><a class="header-anchor" href="#sumを実装する-2021-11-12"><span>sumを実装する(2021-11-12)</span></a></h3><p>sumはbuiltinsだったのでJavaの側にちまちま実装しておく（別にkotlin側で実装してしまってもいいのだが、分散するのもなぁ、という事で）。</p><p>残りのTODOは</p><ul><li><s>math関係を一通り足す</s> 2021-11-13 DONE</li><li><s>ペーストのGUI要素を足す（action barか？）</s> ＞Outやアンダーバーの方が快適なのでやらないことに</li><li>historyの表示をもうちょっとマシにする</li><li>textとしてsend to する機能を足す</li></ul><p>後半２つはやらないかも。 mathは全部揃える気は無いが、三角関数、指数関数、対数くらいは足そうかな、と思っている。</p><p>参考： <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.math/" target="_blank" rel="noopener noreferrer">kotlin.math - Kotlin Programming Language</a></p><p>reduceは欲しい気がするなぁ。functoolsか。</p><p><a href="https://docs.python.org/3/howto/functional.html#the-functools-module" target="_blank" rel="noopener noreferrer">Functional Programming HOWTO — Python 3.10.0 documentation</a></p><p>いや、こういうのは必要になるまで実装しない方がいいよな。</p><h3 id="結果をoutリストに入れる-2021-11-19" tabindex="-1"><a class="header-anchor" href="#結果をoutリストに入れる-2021-11-19"><span>結果をOutリストに入れる（2021-11-19）</span></a></h3><p>前の結果をコピペするよりも、変数で参照出来た方がいいよなぁ、という気分になって、どうせならJupyterに合わせればいいか、ということでJupyterっぽい実装にする。 Outの配列に入れて、ついでにアンダーバーも対応。いい感じだね。</p><h3 id="リリースした-2021-12-11" tabindex="-1"><a class="header-anchor" href="#リリースした-2021-12-11"><span>リリースした (2021-12-11)</span></a></h3><p>無事リリース出来た。よしよし。 これで完成であまり機能追加したりする事は無いかなぁ。 exportくらいつけてもいいかなぁ、と思ったが、使う機会が今の所無いので使わないということかな、と思う。</p>',51)])])}const p=e(l,[["render",n]]),s=JSON.parse('{"path":"/Calclark.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1639237313000,"contributors":[{"name":"Kazuma Arino","username":"","email":"hogeika2@gmail.com","commits":7}],"changelog":[{"hash":"d25078e713473ae595410f6621766a8a7330e03c","time":1639237313000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"225d5b6997cca47f9c809105b77dc80ede7ba4c2","time":1639188474000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"2008553a31b4e71fc7e1a87331b8a482b0bf8ccd","time":1637410206000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"f57d8c9095e8165e7c6a15e7f64fab06dc2ace55","time":1637288858000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"2ad8428da9473465d706957f7eeaf9b620f588e9","time":1636937632000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"8447fc355163f0f0c3b2e023dcd10f7aac9605c6","time":1636431217000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"8bfcfa92ba8bb99082c8412f3d1f3bd1de1e4687","time":1636250189000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"}]},"filePathRelative":"Calclark.md"}');export{p as comp,s as data};
