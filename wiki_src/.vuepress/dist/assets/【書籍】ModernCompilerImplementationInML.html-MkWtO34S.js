import{_ as n,c as o,b as e,o as t}from"./app-CHbCxg9g.js";const i={};function l(r,a){return t(),o("div",null,[...a[0]||(a[0]=[e("ul",null,[e("li",null,"[[書籍]]"),e("li",null,"[[技術的なメモ]]")],-1),e("p",null,[e("a",{href:"https://amzn.to/4hKa77e",target:"_blank",rel:"noopener noreferrer"},"amazon: Modern Compiler Implementation in ML")],-1),e("p",null,"いわゆるタイガーブック。 若い頃Tiger Languageの終わりまで割と真面目に読んだが、 割と定期的に見直したくなる項目があるのでKindleで買い直した。",-1),e("h2",{id:"polymorphic-typeをinferenceまで読む-2025-02-09-日",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#polymorphic-typeをinferenceまで読む-2025-02-09-日"},[e("span",null,"Polymorphic typeをinferenceまで読む 2025-02-09 (日)")])],-1),e("p",null,"[[Folang]]でGenericsの実装を雑にしたら割と行き詰まったので読んだ。 自分なりに考えた事はかなり近い。",-1),e("p",null,"instantiationはちょっと説明は分かりにくかったが、ようするにgenericな関数のcallに対して、その場でMetaな型を型パラメータに割り当てる、という事だよな。 そしてgenerarizationは最後まで解決されなかったMetaの型を型パラメータに昇格させる、という事か。",-1)])])}const c=n(i,[["render",l]]),p=JSON.parse('{"path":"/%E3%80%90%E6%9B%B8%E7%B1%8D%E3%80%91ModernCompilerImplementationInML.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1739145936000,"contributors":[{"name":"Kazuma Arino","username":"","email":"hogeika2@gmail.com","commits":3}],"changelog":[{"hash":"3e19a6327001c0c634eb874ec684fae5e358efe0","time":1739145936000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"c795f7366effe9027f69a8a7e11fc95d67532283","time":1739111800000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"cf45470cab954afa44cc03890235bad9a6863e9a","time":1739104330000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"}]},"filePathRelative":"【書籍】ModernCompilerImplementationInML.md"}');export{c as comp,p as data};
