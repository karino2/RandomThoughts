import{_ as r,c as o,b as a,a as n,o as i}from"./app-CHiHTJW6.js";const t={};function p(c,e){return i(),o("div",null,[...e[0]||(e[0]=[a("p",null,"[[並列プログラム]]",-1),a("p",null,"C++ Concurrency in Action の第二版。 WikiNameとしてはプラス記号は使いたくないのでCppと書いたが。",-1),a("iframe",{sandbox:"allow-popups allow-scripts allow-modals allow-forms allow-same-origin",style:{width:"120px",height:"240px"},marginwidth:"0",marginheight:"0",scrolling:"no",frameborder:"0",src:"//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=karino203-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B0977ZDXX5&linkId=08364ee74f9548da315bcaa41180e646"},null,-1),a("p",null,"本家のmanningのサイトで安売りしてたのでこっちで買う。",-1),a("p",null,[a("a",{href:"https://www.manning.com/books/c-plus-plus-concurrency-in-action-second-edition?ar=true&lpse=A",target:"_blank",rel:"noopener noreferrer"},"C++ Concurrency in Action, Second Edition")],-1),a("h2",{id:"読み始めた雑感-2023-10-28-土",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#読み始めた雑感-2023-10-28-土"},[a("span",null,"読み始めた雑感 2023-10-28 (土)")])],-1),a("p",null,"[[【書籍】ConcurrentProgrammingOnWindows]]の並列データ構造系のを読もうとしたら、.NETでC++ではそのままでは実現しづらいコードや、 C++特有の可視性周りの落とし穴がありそうな所などが目について、 やっぱC++の本じゃないとダメだなぁ、と思いこの本を買ってみた。",-1),a("p",null,"自分の手持ちでは、The Art of Multiprocessor Programmingが一番しっかりした教科書なんだが、",-1),a("iframe",{sandbox:"allow-popups allow-scripts allow-modals allow-forms allow-same-origin",style:{width:"120px",height:"240px"},marginwidth:"0",marginheight:"0",scrolling:"no",frameborder:"0",src:"//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=karino203-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B008CYT5TS&linkId=366f086f46709a092c0473c277b0f1a3"},null,-1),n('<p>これもJavaだし、やっぱC++の本が欲しいなぁ、という事で買ってみた。</p><p>現在二章でthreadの話をしているのであまり印象が良くない。しかもSTLが基本的には十分だ、みたいな事が書いてあって、 全く同意出来ない（というかそもそも提供しているAPIが良くないと思っている）自分とは相容れないなぁ、という気はする。</p><p>ただ最初はthreadから話をするしか無い、という立場も有り得るだろうし、何にせよ自分は並列コンテナ系の話がメインのつもりで読んでいるので、もう少し読み進めてみる予定。</p><h3 id="何故threadの話から始めるのが良くないのか" tabindex="-1"><a class="header-anchor" href="#何故threadの話から始めるのが良くないのか"><span>何故threadの話から始めるのが良くないのか？</span></a></h3><p>この辺の話は何度かしている。</p><ul><li><a href="https://karino2.github.io/2021/03/05/future_for_parallel.html" target="_blank" rel="noopener noreferrer">並列プログラムから見たFuture、という動画シリーズを作った - なーんだ、ただの水たまりじゃないか</a></li><li><a href="https://messagepassing.github.io/012-manycore/01-morrita/" target="_blank" rel="noopener noreferrer">非同期と並列 / morrita - Message Passing</a></li></ul><p>基本的にthreadとlockというのはうまく行かない考え方で、thread poolとnon blocking futureしかありえない、という事は大前提にすべきである、と思っている。 これは自分の他にも言っている人は居るというか割とガチで並列やっている人の間ではほぼコンセンサスだろうと思う。（Adobeのadobe standard libraryとfollyがこの辺では足並みが揃っている）</p><p>threadとlockは他への依存が無く、何らかのパラダイムを押し付けないという点で最初に教えやすい。 ただこのやり方で並列プログラムが期待通りに動く事はほぼ無い。 教えやすいが使うのが難しい。</p><p>並列のプログラムでうまくいっているものは、書き込みに何らかの制約があるアーキテクチャになっている。 例えば最近読んでいるmimallocでは確保をするのはいつもオーナーのスレッドのみなので、 それに排他制御が不要になっている。 このように問題をうまく排他制御が要らないように構成するのがthreadやlockを使うプログラムの根本にあるのだけれど、 それはかなりadvancedな話題で、 単に並列のプリミティブを教えてそれを使った並列コンテナの実装を見ていく、という話題では全くたどり着けない話に思う。</p><p>だから最初はnon blocking futureとそれにともなう基本的なプログラム方法を教えて、 その範囲に収まらないより発展的な事をやりたい時に良くあるパターンを教える、 みたいに進んで欲しいのだけれど、その為にはSTLに無くしかもプログラムモデルとしてかなり強い制約を最初に課す non blocking futureとthread poolが必要になってしまうのだよな。</p><p>本を書く人としてはthreadやmutex、conditional variableなどのプリミティブを教えてそれの落とし穴を教えてlock freeな並列コンテナの話をする、 という方が断然書きやすいし、他人にもっとも押し付けるものが少ないのだけれど、 現場とは大きく乖離してしまう。</p><p>現実的には並列プログラムはすごく厳しい制約の何らかのプログラムモデルを受け入れるしか無いのだけれど、 これにコンセンサスが無くてどれかを選ばなくてはいけないんだよな。 いくつかのうまく行っている例を学んでそれらでいろいろ書く技能を身に着けて、それらを実現する為のlow levelなメカニズムを学ぶ、 という風に進むのが理想なのだろうが、 正直うまくいってるプログラムモデル一つマスターするだけでお腹いっぱいなので複数を学ぶのは非現実的なのでは無かろうか。</p><h3 id="_3章-sharing-dataは思ったよりも良い-2023-10-29-日" tabindex="-1"><a class="header-anchor" href="#_3章-sharing-dataは思ったよりも良い-2023-10-29-日"><span>3章 sharing dataは思ったよりも良い - 2023-10-29 (日)</span></a></h3><p>3章のsharing dataで、3.3のstaticの話とかはなかなか良い。 標準として関数内staticは呼び出しが一つのスレッドに保証されて、他のスレッドからアクセスする時は初期化が終わっている事が保証されているらしい。 へー、随分と強い制約だね。 なんか昔どこかで聞いた事ある気もするが、覚えていなかったので勉強になった。＞[[Cpp]]に関連メモを残す</p><p>こういうC++特有の話は良いね。2章は印象悪かったが3章の後半はだいぶ印象が改善した。</p><h3 id="_4章-concurrency-ts関連の印象" tabindex="-1"><a class="header-anchor" href="#_4章-concurrency-ts関連の印象"><span>4章 Concurrency TS関連の印象</span></a></h3><p>4章の前半はfutureの話とか関数型とかメッセージパッシングがどうとかのポエムばかりで全く実用性を感じないが、 Concurrency TSの話は勉強になった。</p><p>Concurrency TSにはcontinuationを指定出来るfutureがあるとの事で、 へーっと思ってみていたが、executer周りの概念が無いので微妙に使い物にならない。 結局この辺は、future以外の所を実装依存にする余地を残しておくと、必要な要素が入れきれないんだよな。 ただ方向性としては正しい方向に進んでいるので、これの次のバージョンは使い物になるかもしれないが。 C++の標準で求められるのは、必要なものを作るためのビルディングブロックになる事だと思うんだが、 この辺はAPI的にこの上に必要なのが作れない所が難しいよな。 状況を限定する代わりにその状況では使えてそれ以外の状況では使えないものにするか、 状況を限定せずに誰も使えないものにするかの二択になってしまっていて、後者を選んでいる。</p><p>latchとbarrierはよそでは良く見るヤツで、こういうのは欲しいんだが、 これもブロッキングしてしまうと使えないじゃん、って感じはする。 やはりthread poolと分けてこの辺の概念を作るのは無理なんだよな。 ただこういうのがあるというのは知識としては知っておく価値はあるので、良い勉強になった。</p><p>現状は使い物にならないという結論は変わらないが、こっちの動向はウォッチしておく価値があるかもしれん。 flexible_barrierみたいなのがもうちょっと整備されれば使える日も来るかもしれない。</p><h3 id="_5章-memory-orderはかなり詳しくて良い" tabindex="-1"><a class="header-anchor" href="#_5章-memory-orderはかなり詳しくて良い"><span>5章 memory orderはかなり詳しくて良い</span></a></h3><p>例え話はかえって分かりにくくて説明の内容は気に食わないが、 それでも必要な例がいろいろあるのは素晴らしい。 自分はだいぶ理解が足りていなかったという事を理解した。</p><p>orderingは<a href="https://www.1024cores.net/home/lock-free-algorithms/so-what-is-a-memory-model-and-how-to-cook-it/ordering" target="_blank" rel="noopener noreferrer">1024cores - Ordering</a>と合わせて見るともうちょっとわかりやすい。</p><p>だいぶ理解が深まり、release-acquireの組も使える程度の理解にはなった。 ただこのatomic operationがボトルネックになった事はこれまで無いし、今後もなさそうなのでseq cstでいいかな、という気はする。</p><p>この本の印象がだいぶ良くなった。こういう解説はやはりC++の本で読まないとね。</p><h3 id="_6章、7章の並列コンテナはなかなか良い" tabindex="-1"><a class="header-anchor" href="#_6章、7章の並列コンテナはなかなか良い"><span>6章、7章の並列コンテナはなかなか良い</span></a></h3><p>6章がlockを使った並列コンテナだが、lockの粒度を下げる為に良くあるロックフリーを作るのと同じようなトリックを使う。 この章をあえて設けるのは良い判断に思う。 C++のロックフリーのコンテナはJavaや<code>C#</code>に比べてかなり複雑なので、 一旦ロックを使ってメモリ管理に絡む面倒さは置いておいて、 けれど並列性を上げるにはどうしたらいいか、という話を見る。</p><p>7章はlock freeのスタックやキューの話だが、これはなかなか素晴らしい。 メモリ管理の話がややこしすぎてやれる気がしないけれど、 こういうのはC++じゃないと扱えない話題なので、他の本で見た事は無く、 そうそう、こういう話が見たかったんだよ、という内容だ。</p><p>[[【書籍】ConcurrentProgrammingOnWindows]]を見た時に、「あれ？これあ<code>C#</code>ならGCがどうにかしてくれるだろうけれど、C++だとどうしたらいいんだ？」と思った事がちょくちょくあったが、 やはりC++だとめちゃくちゃ面倒くさい、という事が良く分かる。 一方でlock freeを諦めてshread_ptrでカウンタを管理すればだいぶ楽になるし、 また解放に関しても何らかの方法でそれが安全だと分かるならこれらの面倒を大きく迂回出来るが、 ロックベースのコードの説明が先にあるので、妥協した場合にどういうコードになるかを組み合わせて考える事が出来る。 これは実用的に良い。</p><p>C++はノードをunchainした後に、まだそのノードを参照している人がいるかもしれないのでその場では削除出来ない、という問題が出てくる。 これは並列GCがなんとかしてくれる問題の一部をプログラマがやらなくてはいけない、という話になる。 うわぁ、これは無理だな〜という内容だ。 説明も分かりにくくてexternal countとinternal countの説明は意味が分からない。 ただそれでも、必要な事は書いてあるので自分で考える事は出来る。この情報は貴重だ。</p><p>個人的にはARMとかx64ではどうなのか、という話をもう少し見たい。現代的なプロセッサでどうなのか、というのが一番の関心事だろうから。そういった情報が無いのは残念ではある。</p><p>それでも、C++で書いた例というのは手元においておく必要がある、と思わせる内容で、内容も十分に必要な事が入っているように思う。</p><h3 id="_8章のdesigning-concurrent-codeは読む価値無し-2023-11-01-水" tabindex="-1"><a class="header-anchor" href="#_8章のdesigning-concurrent-codeは読む価値無し-2023-11-01-水"><span>8章のDesigning concurrent codeは読む価値無し - 2023-11-01 (水)</span></a></h3><p>7章までがなかなか良かったのだが、8章は酷い。 7章までで道具を作って8章からそれらを作った大きなプログラムの話をするのかと思いきや、 並列の問題みたいなのをまとめサイト並の中身のなさで並べるだけで、 最後に書くのもparallelなfor_eachとかのおもちゃみたいな物ばかり。 普通の規模のアプリを書いた事があるのか？と疑いたくなるほど。</p><p>小さなものだけを考えるのが何故良くないか、というと、そこの単位でブロッキングして問題が終わってしまうからだ。 コアを使い切ろうとすればそういう終わりの所で余るコアには次のタスクを入れなくてはいけなくて、 それらをアプリケーション全体でいろいろ調整するのが日常なのに、 ここにある道具立てではそれが出来ない。 大きなコードの元になるような小さなコードじゃなくて、小さなコードじゃないと使えない方法を使っているのがダメな所だ。</p><p>7章の専門性の高さと8章の素人っぽさは、本当に同じ作者が書いたのか？と思いたくなる内容だけれど、 並列コンテナはトピックとしてそれだけ洗練された分野だという事なんだろうなぁ。</p><h3 id="_9章のthread-poolとinterruptible-threadはまぁまぁ-2023-11-04-土" tabindex="-1"><a class="header-anchor" href="#_9章のthread-poolとinterruptible-threadはまぁまぁ-2023-11-04-土"><span>9章のthread poolとinterruptible threadはまぁまぁ - 2023-11-04 (土)</span></a></h3><p>thread poolはmutexを使った普通のwork stealingの実装で簡単なコードで難しい事はないが、 自作のthread poolには必要になる事もあるだろう、という感じのコードなので参考にはなる。</p><p>interruptible threadはそんなに必要とは思えない（使う機会が少なく、使い機会では必要なメカニズムを手書きすれば良い）が、 必要な機会がある人には参考にはなりそうなので悪くは無いと思う。</p><p>どちらも7章までの専門性の高さに比べると突然凡庸なプログラマが書いた感じの内容になっていて、 コードも簡単になっているが、この手のコードを触る人にはアイデアとして触れておく価値はある気がするし、 何より簡単なので見ておくのは悪くないとも思った。</p><p>一方でこの程度の内容なら5章、6章、7章の話は全く要らない訳で、 本の構成としてターゲットを絞りきれてない感じはあるよなぁ。 こういう内容を書くなら前半をもっと薄くしてmutexを使ってもっと本格的なコードについて語るような本にした方が良いし、 そういう内容が嫌ならこの章ももっとロックフリーな話をしていかないと、それ以前との断絶がある。 それぞれ価値があると思うのだが、現実はどっちつかずなこの本一冊しか無いので、 これで学べる事を引き出す事でお茶を濁すしか無かろう。</p><h3 id="この本はここまで計測の話が無い" tabindex="-1"><a class="header-anchor" href="#この本はここまで計測の話が無い"><span>この本はここまで計測の話が無い</span></a></h3><p>ちなみにこの本がいまいちな事として、ここまで計測の話が全く出てこない。 例えば自分も特定の環境ではthread poolを自作しているのだが、グローバルなタスクキューしか持ってない。 なんでかというと、そこがボトルネックになった事が今まで無いから。 遅くなったら直そうと思って最初に作ったものが、全く遅くならない。</p><p>この辺はどういう時にどこが遅くなるのか、みたいなのを具体的な計測結果を元に話をしないと、 どういう時にやるべき最適化なのかの説得力が無い。 work stealはみんなやるのでここが詰まるのは良くある事なんだろうけれど、 自分の感覚だとかなりタスクが小さくないと詰まらないんだよなぁ。 ソートとかのアルゴリズム的なものをタスクに分けるような特殊なケース以外では大して問題にはならないんじゃないか、という気はする。</p><p>ロックフリーも計測の結果どのくらいご利益があるかを話してくれないと、 この複雑さをどのくらい受け入れるべきか、みたいなのが良く分からない。 特にアーキテクチャによって大きく違う1ワード以上のshared_ptrとかconsistency周りの話は、 いくつかの主要なアーキテクチャでの比較が無いと判断出来ないと思うんだが、 そういう話が全然無いんだよなぁ。</p><p>なんか時分で測った事無くて、他人が測って困って対策した事の対策だけを写しているだけなんじゃないか？と邪推してしまう。 特に7章の専門性の高さは単に業界の蓄積がそこだけ良く知られているのでそれを写しているだけなんじゃないか、と思ってしまう。 本当に自分のアプリで困ってロックフリーにした事あるの？みたいな。</p><h2 id="_10章のc-17のconcurrencyの章はあまり読む気が起こらなかった" tabindex="-1"><a class="header-anchor" href="#_10章のc-17のconcurrencyの章はあまり読む気が起こらなかった"><span>10章のC++ 17のconcurrencyの章はあまり読む気が起こらなかった</span></a></h2><p>C++ 17のconcurrencyはparallel forとかの話で、自分の経験上この手のライブラリで一定以上複雑なアプリでコアが使い切れる事は無いので、あまり関心が湧かなかったので飛ばし読み。 C++ 17に興味がある人なら良いと思うが。<a href="https://learn.microsoft.com/en-us/cpp/parallel/concrt/parallel-patterns-library-ppl?view=msvc-170" target="_blank" rel="noopener noreferrer">MSのPPL</a>とか、その他似たようなのはいたる所にあるがどれもあんま使われてないよね。</p><h2 id="_11章のテストと計測の話はほとんど読む価値無し" tabindex="-1"><a class="header-anchor" href="#_11章のテストと計測の話はほとんど読む価値無し"><span>11章のテストと計測の話はほとんど読む価値無し</span></a></h2><p>前半はコードをレビューして頑張ろうとかレビューする時にはこういう所を気をつけてるよ、という程度の話で、 その内容もそれほど深い何かを感じるものでは無い。 役に立たない訳では無いが、この章を読まなくてもレビューを知っている人がチェックリストを作れば同じような内容になるだろう。</p><p>テストは簡単なテストを書いてみた、みたいな内容であまり役に立たない。 自分で書いても同じ感じになるし、これだけ大変になってしまうのでカバレッジを上げていくのはとても大変だ、というあたりに問題があるので、 これを示されても「うーん、こりゃ大変だね」という結論以上のなにかは無い。</p><p>パフォーマンスの計測に関しては、いろいろな設定で測れ、と書いてあるだけ。使うツールすら書いてない。これは酷い。</p><p>という事で11章の前半は価値は無いでも無いが薄く、後半は全く価値がない、酷い内容だった。</p><h2 id="全体を読んでの感想-2023-11-04-土" tabindex="-1"><a class="header-anchor" href="#全体を読んでの感想-2023-11-04-土"><span>全体を読んでの感想 - 2023-11-04 (土)</span></a></h2><p>最後が酷かったので印象は悪いけれど、全体としてはC++で並列のコードを書くなら必携の本ではあろうと思う。 この本が素晴らしいというよりは代替が無いから、という感じではあるが、 代替が無いので価値は高い。</p><p>C++はC++特有の問題がいろいろあるので、それ以外の言語の並列の本では不十分だ、 という事が良く分かる本ではある。だからC++の本である価値が高い。 そしてC++は11以降で並列の話が整備されているので、それ以前の本は役に立たず、 14以降の内容で並列の話があるのはたぶんこの本が唯一の本なので、 他の選択肢は無い。</p><p>C++のメモリモデル周辺の内容と、ロックフリー周りの内容は素晴らしかった。高い専門性を持った人が書いた内容であるのは間違いない。 著者がこの辺の専門家でこの辺しか知らないのか、はたまた何か元になっている素晴らしい知見があるのかは分からないが（たぶんある程度は後者だと思う、人類の蓄積という点ではほぼ確実なので）、 この辺の内容がちゃんと解説されているという点でこの本は素晴らしい価値がある。 ただし解説はめちゃ分かりにくく、最後まで何が言いたいのか良く分からなかった所は結構ある。 そういう所は他を参照する必要があるが、 この本の価値は知らなくてはいけない事をすべて提示する事にあるので、 それを知る事が出来なくても目的はある程度満たせている。</p><p>しかもコード自体はちゃんとしたコードなので、参考になる事は多い。 なんだかんだで似たような問題に遭遇する事が多い、というか似たような問題しか人類にはまだ解けてないという感じと思うが、 そういう訳でどれか一つの回答のコードはとても参考になる。 このコード例の為にも手元に置いておく価値がある。</p><p>逆にそれ以外の内容は全くその辺の知見が活かされず、なんか残念な本になっている印象はある。 役に立たないコンサルって感じ。</p><p>STLの並列周りの説明としては良く書けているのかもしれないが、 STL自体があまり使い物にならない機能が多いので、あまり役に立たない印象だ。 この辺はSTLの並列周りがパラダイムを押し付けないが、押し付けないとどれか一つのパラダイムを選ぶとほとんど使い物にならなくなる、 という問題の結果であって、書籍の問題では無いかもしれない。 ただ書籍の多くの紙面が役に立たない、という問題はある。</p><p>この本は並列プログラムを書くのに必要な多くのことが欠けている。 それはmimallocとかfollyの中にある何かで、本当はそれを学びたい。 ただこの本には必要な事もいろいろ書いてあるので、それは学ぶ必要はある。 足りないだけで、必要なものは含まれている。</p><p>という事でいまいちな所も多いけれど、それでもC++で並列のコードを書くなら必携の本と思う。 いまいちな所をちゃんと無視出来る能力が読み手に求められるが、 そもそもC++で並列なコードを書くのは相当の技量を求められるものなので、 それが出来ないならそもそも近づいてはいけない。</p>',62)])])}const s=r(t,[["render",p]]),h=JSON.parse('{"path":"/%E3%80%90%E6%9B%B8%E7%B1%8D%E3%80%91CppConcurrencyInAction.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1701000844000,"contributors":[{"name":"Kazuma Arino","username":"","email":"hogeika2@gmail.com","commits":11}],"changelog":[{"hash":"8a0154f2734f838b4ed368c3afecbbcac1492751","time":1701000844000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"a6eab6717844fb8342869b43478a3ef624148471","time":1699075504000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"4716a162606cd8c76823db8eb08e017743eaa745","time":1699070750000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"c13991f3d86c2193b990932c7fa648735ecaa210","time":1698844424000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"f3a91a10fb5c801898ceb087412702c2340248c8","time":1698815128000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"d13a5b0b182e87844644feefb9015484d4371153","time":1698624356000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"929ea183c399e5dbf292e917aba22f4ef6d78646","time":1698559535000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"d2c2ca2bf427e8463d8f7cc0749306eb7a4b4658","time":1698552334000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"f3de4a292b5747d57e4048f92e4c4dd8c9816de1","time":1698480344000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"7f81ea45073f32e1be542a4c7d9ac74aa3f0d0d5","time":1698477443000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"55c7501d94b46dbf34983572eeeab5efc8146ccc","time":1698473128000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"}]},"filePathRelative":"【書籍】CppConcurrencyInAction.md"}');export{s as comp,h as data};
