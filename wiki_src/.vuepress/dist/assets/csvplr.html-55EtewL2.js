import{_ as a,c as s,a as n,o as l}from"./app-CHbCxg9g.js";const i={};function r(t,e){return l(),s("div",null,[...e[0]||(e[0]=[n(`<p>[[CSVのプロットはもうちょっと簡単にならないか]]で考えついたアイデア。[[FSharp]]製。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">$ cat pollen_data.csv |</span>
<span class="line"> csvplr filter &#39;pollen != -9999&#39; |</span>
<span class="line"> csvplr mutate &#39;day=date(date)&#39; |</span>
<span class="line"> csvplr group_by &#39;day&#39; |</span>
<span class="line"> csvplr summarise &#39;perday=sum(pollen)&#39;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>csvをコマンドラインからdplyrっぽく操作したい。 Unixのコマンド群としてdplyrのような操作を実装する。 最後のplotは別コマンドで。([[htmnix_chart]]を使う気だが、テキストからグラフが作れるコマンドならなんでも良い感じ）</p><p>入力は標準入力、出力は標準出力でどちらも基本的にはcsv。</p><p>追記： dplyrなんだからcsvplyrにすべきだった、と後で気づいたが、ちょと文字数多い気がするしまぁいいか。</p><h2 id="レポジトリ" tabindex="-1"><a class="header-anchor" href="#レポジトリ"><span>レポジトリ</span></a></h2><ul><li><a href="https://github.com/karino2/csvplr" target="_blank" rel="noopener noreferrer">karino2/csvplr: dplyr like unix command line tool for csv.</a></li><li><a href="https://youtu.be/t-vmqqRJASg" target="_blank" rel="noopener noreferrer">youtube: csvplrのデモ</a> スクリーンキャストしつつ喋って解説</li></ul><h2 id="実装済み" tabindex="-1"><a class="header-anchor" href="#実装済み"><span>実装済み</span></a></h2><ul><li>filter</li><li>select</li><li>mutate (date, year, month, day, hour, minute, paste0, is.na)</li><li>group_by</li><li>summarise (sumとnくらい、group_by必須)</li></ul><h2 id="コンセプト" tabindex="-1"><a class="header-anchor" href="#コンセプト"><span>コンセプト</span></a></h2><p>csvを渡すと適当にdataframeとして読み込み、 それをdplyr的に操作するUnixコマンド群。</p><p>通常のheadなどと同様に操作をしては確認する、を繰り返しながらパイプラインをつなげていって開発するのを前提としたスタイル。 コマンド名をcsvplrと呼ぶ事にし、サブコマンドでfilter, arrange, select, group_by, summariseなどを実装する。</p><p>わざわざ型情報をguessするが、出力は単なるcsvで型情報は出力しない。</p><p>guessはstringで持ちつつ操作に応じて行う。例えばdate関数の引数ならDateTime、などのように。</p><p>それぞれのサブコマンドには、Rのサブセットになっているような式の文字列を渡す。 dplyrのfilterやmutateやgroup_byなどの関数にわたす引数の、括弧の中だけを渡す形になるべく近づける。 （ただしあくまでシンタックスが似ているシンプルなミニ言語に過ぎない）。</p><p>当面は実際に使うユースケースに必要な機能だけを実装していく。</p><h2 id="具体例" tabindex="-1"><a class="header-anchor" href="#具体例"><span>具体例</span></a></h2><p>花粉のデータがcsvで落とせる。</p><p><a href="https://wxtech.weathernews.com/pollen/index.html" target="_blank" rel="noopener noreferrer">花粉飛散数データの無料ダウンロード：WxTech®（ウェザーテック）</a></p><p>headすると以下みたいな感じ（数字は適当）</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">citycode,date,pollen</span>
<span class="line">14208,2022-02-25T00:00:00+09:00,3</span>
<span class="line">14208,2022-02-25T01:00:00+09:00,5</span>
<span class="line">14208,2022-02-25T02:00:00+09:00,12</span>
<span class="line">14208,2022-02-25T03:00:00+09:00,24</span>
<span class="line">14208,2022-02-25T04:00:00+09:00,23</span>
<span class="line">14208,2022-02-25T05:00:00+09:00,12</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>見ての通り時間ごとになっているので、日ごとにgroupbyしてsumした結果をplotしたい。</p><p>Rでは以下のような操作をしている。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">perday &lt;- table %&gt;%</span>
<span class="line">  filter(pollen != -9999) %&gt;%</span>
<span class="line">  mutate(day = date(date)) %&gt;%</span>
<span class="line">  group_by(day) %&gt;%</span>
<span class="line">  summarise(perday=sum(pollen))</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>カラム名がdateでかぶっているので読みにくいが、やっている事は割と単純。naというかまだ計測結果が出てないセルは-9999が入る模様。</p><p>これを、csvplrにすると以下のようになる。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">$ head~/some/path/to/some_path.csv</span>
<span class="line">$ cat ~/some/path/to/some_path.csv | csvplr filter &#39;pollen != -9999&#39; | head</span>
<span class="line">$ cat ~/some/path/to/some_path.csv | csvplr filter &#39;pollen != -9999&#39; | csvplr mutate &#39;day=date(date)&#39; | head</span>
<span class="line">$ cat ~/some/path/to/some_path.csv | csvplr filter &#39;pollen != -9999&#39; | csvplr mutate &#39;day=date(date)&#39; | csvplr group_by &#39;day&#39; | head</span>
<span class="line">$ cat ~/some/path/to/some_path.csv | csvplr filter &#39;pollen != -9999&#39; | csvplr mutate &#39;day=date(date)&#39; | csvplr group_by &#39;day&#39; | csvplr summarise &#39;perday=sum(pollen)&#39;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最後の行を改行して書くと以下のようになる。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">$ cat ~/some/path/to/some_path.csv |</span>
<span class="line"> csvplr filter &#39;pollen != -9999&#39; |</span>
<span class="line"> csvplr mutate &#39;day=date(date)&#39; |</span>
<span class="line"> csvplr group_by &#39;day&#39; |</span>
<span class="line"> csvplr summarise &#39;perday=sum(pollen)&#39;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上記のRの例と比較すると、csvplrを消してみればほとんど一対一に対応しているのがわかると思う。</p><p>date関連は<a href="https://lubridate.tidyverse.org/" target="_blank" rel="noopener noreferrer">lubridate</a>のサブセットとする。</p><h3 id="時間ごとのプロット" tabindex="-1"><a class="header-anchor" href="#時間ごとのプロット"><span>時間ごとのプロット</span></a></h3><p>group byせずに時間ごとにプロットしたいが、タイムゾーンまでついたDateTimeは見づらいのでpaste0でセルを作る例。 全部だと多くなりすぎるので3月1日以降だけ、とかいう感じで絞り込む。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">$ cat pollen_14108.csv |</span>
<span class="line"> csvplr filter &#39;pollen != -9999&#39;  |</span>
<span class="line"> csvplr mutate &#39;dtonly=date(date)&#39; |</span>
<span class="line"> csvplr filter &#39;dtonly &gt;= &quot;2022-03-01&quot;&#39; |</span>
<span class="line"> csvplr mutate &#39;date2=paste0(month(date), &quot;-&quot;, day(date), &quot; &quot;, hour(date))&#39; |</span>
<span class="line"> csvplr select &#39;date2, pollen&#39;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="group-byの仕様" tabindex="-1"><a class="header-anchor" href="#group-byの仕様"><span>group_byの仕様</span></a></h2><p>csvplrはUnix的な仕様なので、group byの結果もテキストとして吐かれる必要がある。 これはsummarizeに食わせる以外では使えなくても構わないが、 簡単の為、少し特殊なcsvとする。</p><p>一つのセルにgroup情報を埋め込む為に、適当なセパレータ、とりあえずcsvでは使われなさそうなエクスクラメーションマークを特殊な記号として使う。 これが使われていると変に誤解する場合があるが、そういうデータはサポートしない（そういう特殊なのは諦めてRなりpandasなりで真面目に処理すればよかろう）。</p><p><code>group_by &quot;year, month&quot;</code></p><p>は、以下のようなセル名になり、</p><p><code>!csvplr_group_by_zzz!year!month!</code></p><p>各セルの値はyearのカラムとmonthのカラムの値をエクスクラメーションマークで連結したもの（始めと終わりもあり）としよう。 例えば以下のような感じになる。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">!2022!12!</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>summariseはこれらの値をキーとして集約していく。</p><h2 id="使ってみた感想" tabindex="-1"><a class="header-anchor" href="#使ってみた感想"><span>使ってみた感想</span></a></h2><p>少し使ってみたが、やはりなかなか良い。 まずdplyrと同様だが基本的に副作用レスというか、もとファイルをいじらないのがいい。 これがシェル向きというか、対話的な試行錯誤に向いている。</p><p>そして各作業を目視して一段ずつ進めていくので、非常に生産性が高い。 もとファイルをいじらないというのと合わせて、いくらでもやり直しが出来てその場で見ながら作業出来るので、 試行錯誤が本当に簡単。</p><p>csvplrとは直接関係無いが花粉データはwgetで取れるので、コマンドラインと相性がとてもよい。</p><p>最初は日付のgroup byしてsummariseしか使わないだろうから書き捨て集計プログラムでもいいんじゃないか、 と思っていたが、使っていると意外とここ3日間だけ見てみたいとか出てくるので、 作った甲斐はある気がする。</p><h2 id="concatとdistinct-未実装" tabindex="-1"><a class="header-anchor" href="#concatとdistinct-未実装"><span>concatとdistinct（未実装）</span></a></h2><p>csvは日付を変えて同種のデータを取得する、というパターンがある。 銀行口座の明細とか花粉のデータとか。 こういう時には、念の為一日くらい重複させてデータを取得するのがオペレーション的に楽なので、 こういうのを簡単につなげつつ重複を削除する、という事はやりたい事がちょくちょくある。</p><p>つなげるのはconcatとかでファイル２つ指定したらつなげる、で良さそうだが、 花粉データはまだ結果が出てない所は-9999になるんだよな。 つなげた時にどっちを優先させるか、とか指定するのは面倒なので、 それよりはfilterしてconcatしたい気はする。</p><p>そう思うと一時ファイルを用意するのも面倒なので、stdinと引数のファイルをつなげるのがいいか。</p><p>distinctは実装がちょっとむずかしい。 一方で現実的には時刻なり取引idなり、何かしら一意な事を一つのセルだけで表せるのが大半で、これのdistinctは簡単に実装出来るので、 カラム指定しているケースだけ対応、でいいかなぁ。</p><h2 id="sqlを使った類似のツール" tabindex="-1"><a class="header-anchor" href="#sqlを使った類似のツール"><span>SQLを使った類似のツール</span></a></h2><p>ググっていたら、少し似たモチベーションのツールを見つける。</p><p><a href="https://github.com/mslusarz/csv-nix-tools" target="_blank" rel="noopener noreferrer">mslusarz/csv-nix-tools: List system information as CSV, manipulate it, pretty print, or export.</a></p><p>こちらはUnixコマンドと足りない部分をSQLとする、という感じのもののよう。 ただC言語でビルドをする、というのがちょっと敷居が高い（コマンドも多い）。</p><p>同じようなのが無いか？とググってみて、golangのcsvqというのを見つけた。</p><p><a href="https://github.com/mithrandie/csvq" target="_blank" rel="noopener noreferrer">mithrandie/csvq: SQL-like query language for csv</a></p><p>こちらはより自分が作っているものにコンセプトが近い。 csvplrでは無くてこれでも良いのでは？という気もする。 作る前だったら試してみたかった。</p><p>ただ、これを見ていると、SQLとdplyrの違いを感じる。 SQLは完全なテーブルを作る言語なので、一つ一つの記述に冗長性が高く柔軟性も高い。 dplyrは一つのコマンドは一つの事しか出来ないので、複数つなげないとテーブルは完成しない。 その代わり個々のコマンドは簡潔で直行性が高い。 dplyrの方がUnix的な使い方との相性は良い気がする。 端的に言えばSQLではパイプでつなげる気はあまり起こらないが、dplyrはパイプをたくさんつなげないと何も出来ない。</p><p>インタラクティブにロードして操作してcommit、というのは、 表計算ソフトはかったるい、という時に面白い気はする。 UnixコマンドというよりはSQLiteのようにcsvを操作したい、という感じだよなぁ。 これはこれで使いみちはある気がする。 一方でここまでやるならRにロードしてdplyrで良いのでは無いか、という気もしてしまう。 もちろんRやcolabをどこまで身近に感じるかは人による所で、csvqはたぶんその辺はかなり選択肢として遠い人に向いてるのかもしれない。</p><p>SQLが欲しいのかdataframeが欲しいのか、という違いもありそうに思う。 dplyrはdataframe的だよなぁ。</p><p>なお、コードを見ると実装はめちゃくちゃ大変そう。RDBMS実装しているのに近いよなぁ。</p><p>という事でcsvqはなかなか良さそうにも見えるけれど、自分はcsvplrが欲しいという思いを強くしたので実装を続ける。 そもそもにSQLよりもdplyrの方がデータ探索には良いと思っているからR使う訳だしね。</p><p>それにしてもgolangは試す側は手軽でいいね。 csvplrもgolangで実装してある方がユーザー的には嬉しいんだろうな。</p><h2 id="日々の使用例" tabindex="-1"><a class="header-anchor" href="#日々の使用例"><span>日々の使用例</span></a></h2><p>具体的に何かやった時にここに貼る。</p><h3 id="沖縄県の新型コロナの新規患者数のプロット" tabindex="-1"><a class="header-anchor" href="#沖縄県の新型コロナの新規患者数のプロット"><span>沖縄県の新型コロナの新規患者数のプロット</span></a></h3><p><a href="https://www.pref.okinawa.lg.jp/site/hoken/kansen/soumu/press/20200214_covid19_pr1.html" target="_blank" rel="noopener noreferrer">新型コロナウイルス感染症患者・無症状病原体保有者の発生について／沖縄県</a></p><p>にcsvがある。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">$ cat 0316youseishaitiran_50001-.csv  | nkf | grep &quot;日&quot; |</span>
<span class="line">  csvplr mutate &#39;date=date(確定日)&#39; | csvplr group_by &#39;date&#39; | csvplr summarise &#39;count=n()&#39; |</span>
<span class="line">  awk &#39;NR&lt;2{print $0;next}{print $0| &quot;sort -r&quot;}&#39; | csv2line</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>sjisなのでnkfに通す</li><li>普通じゃないデータをfilterする為にgrepを挟んでいる</li><li>「令和3年2月1日」的な日付は日の桁数の都合でsortしづらいが、dateコマンドで「2022-02-01」型に直せる</li><li>日ごとに集計する為に<code>n()</code>関数をsummariseで使っている</li><li>arrangeはまだ実装してないのでawkで2行目から先をsortしている（<a href="https://stackoverflow.com/questions/14562423/is-there-a-way-to-ignore-header-lines-in-a-unix-sort" target="_blank" rel="noopener noreferrer">sorting - Is there a way to ignore header lines in a UNIX sort? - Stack Overflow</a>）</li></ul>`,73)])])}const d=a(i,[["render",r]]),c=JSON.parse('{"path":"/csvplr.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1656806253000,"contributors":[{"name":"Kazuma Arino","username":"","email":"hogeika2@gmail.com","commits":12}],"changelog":[{"hash":"1e5e1a249df377efb289b64bc5f3086737a29b2b","time":1656806253000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"ac0ee659c7fe7204114d6b57442cfce5dfca49f5","time":1647700382000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"32f3d81c6206ba71867b6ba5ec5d2c9bb4715ba0","time":1647357861000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"6d44d34c87bd683a4cf283254873cd2281f93a00","time":1647153919000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"1dbab853b3e967caf4331c39333dabd924384892","time":1647084489000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"f87d2e6f8c0f10d66116f06e61671934dc81d5ea","time":1647003915000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"49951d4b0444e05c0bc5051587f3eb0b1770c2c2","time":1646899232000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"5b2c3caa85a7eb26e8de9b28bb8ad5275a1dbaee","time":1646897493000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"4f8e5c236510c611c0acde27b2de756e7cc1da7d","time":1646836152000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"dd37332419c990a20ea44466c1cadcb0ae66001d","time":1646835442000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"dec1ee75a09286f6d60ca899ce4d52d29d068da6","time":1646735441000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"0f4df51ee2c66767fc415f97f61e5a36766fcac5","time":1646708144000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"}]},"filePathRelative":"csvplr.md"}');export{d as comp,c as data};
