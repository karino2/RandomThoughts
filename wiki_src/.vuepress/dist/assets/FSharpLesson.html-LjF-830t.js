import{_ as a,c as n,a as s,o as i}from"./app-CTYZxEMR.js";const r={};function l(t,e){return i(),n("div",null,[...e[0]||(e[0]=[s(`<p><a href="https://karino2.github.io/c-lesson/" target="_blank" rel="noopener noreferrer">c-lesson</a>みたいな感じでF# の奴何かやってくれません？と言われてちょっと考えるなど。</p><p>fsharp-lessonが略称かな。</p><ul><li><a href="https://karino2.github.io/fsharp-lesson/" target="_blank" rel="noopener noreferrer">karino2の暇つぶしプログラム教室 F#編</a></li><li><a href="./FSharp.html">FSharp</a></li></ul><h2 id="個人的メモ" tabindex="-1"><a class="header-anchor" href="#個人的メモ"><span>個人的メモ</span></a></h2><ul><li><a href="https://docs.microsoft.com/ja-jp/dotnet/standard/base-types/character-classes-in-regular-expressions#SupportedNamedBlocks" target="_blank" rel="noopener noreferrer">.NET 正規表現での文字クラス - Microsoft Docs</a> IsHiragana, IsKatakana, IsCJKUnifiedIdeographsでひらがな、カタカナ、漢字になるかな。</li><li><a href="https://en.wikipedia.org/wiki/Wikipedia:Copyrights" target="_blank" rel="noopener noreferrer">Wikipedia:Copyrights - Wikipedia</a> WikipediaはCC BY-SA 3.0。Relational Algebraのデータを含めたいかも。</li><li><a href="https://github.com/spectreconsole/radline" target="_blank" rel="noopener noreferrer">spectreconsole/radline: A .NET library to read and display keyboard input.</a> repl作るのに使うかも。</li></ul><h3 id="日本語の扱えるreadline的なのが無い" tabindex="-1"><a class="header-anchor" href="#日本語の扱えるreadline的なのが無い"><span>日本語の扱えるreadline的なのが無い</span></a></h3><p><a href="https://stackoverflow.com/questions/2024170/is-there-a-net-library-similar-to-gnu-readline" target="_blank" rel="noopener noreferrer">c# - Is there a .Net library similar to GNU readline? - Stack Overflow</a></p><p>を見ていろいろ試したが、今の所ちゃんと扱えるのを見つけられていない。</p><p>ブログにした。 <a href="https://karino2.github.io/2022/08/26/dotnet_readline_like_lib_for_japanese.html" target="_blank" rel="noopener noreferrer">dotnetで使えるReadLineっぽいライブラリで日本語が使えるのは無いのだろうか？ - なーんだ、ただの水たまりじゃないか</a></p><p>自分で作る事にした。＞<a href="./ReCJKLine.html">ReCJKLine</a></p><h3 id="ベンチマーク" tabindex="-1"><a class="header-anchor" href="#ベンチマーク"><span>ベンチマーク</span></a></h3><p>第三回ではメモリと時間を測りたい。</p><ul><li><a href="https://benchmarkdotnet.org/" target="_blank" rel="noopener noreferrer">BenchmarkDotNet</a> これが良さそう</li><li><a href="https://phillipcarter.dev/posts/benchmarking-fsharp/" target="_blank" rel="noopener noreferrer">How to use F# and BenchmarkDotNet - Phillip Carter&#39;s blog</a></li><li><a href="https://www.compositional-it.com/news-blog/benchmarking-f-code/" target="_blank" rel="noopener noreferrer">Benchmarking F# code - Compositional IT</a></li></ul><p>ToyRelに試してみた時のメモ。</p><p>とりあえずパッケージを追加。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">$ dotnet add package benchmarkdotnet</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>ToyRelで試す。Program.fsに以下を書く。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">open BenchmarkDotNet.Attributes</span>
<span class="line">open BenchmarkDotNet.Running</span>
<span class="line"></span>
<span class="line">[&lt;MemoryDiagnoser&gt;]</span>
<span class="line">type ProductBench() =</span>
<span class="line">  [&lt;Benchmark&gt;]</span>
<span class="line">  member _.Product() =</span>
<span class="line">    runStatement &quot;use tandp&quot;</span>
<span class="line">    runStatement &quot;(stock) product (delivery)&quot;</span>
<span class="line"></span>
<span class="line">[&lt;EntryPoint&gt;]</span>
<span class="line">let main _ = </span>
<span class="line">  BenchmarkRunner.Run&lt;ProductBench&gt;() |&gt; ignore</span>
<span class="line">  0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下で実行される。ちょっと回数が実行されすぎてランダムのファイル名がぶつかるが。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">$ dotnet run -c Release</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>もうちょっと回数を減らしたい。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">open BenchmarkDotNet.Jobs</span>
<span class="line">open BenchmarkDotNet.Engines</span>
<span class="line"></span>
<span class="line">[&lt;SimpleJob (RunStrategy.ColdStart, targetCount=1)&gt;]</span>
<span class="line">[&lt;MemoryDiagnoser&gt;]</span>
<span class="line">type ProductBench() =</span>
<span class="line">...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>で一回になった。</p><h3 id="自分でメモリを測ってみる。" tabindex="-1"><a class="header-anchor" href="#自分でメモリを測ってみる。"><span>自分でメモリを測ってみる。</span></a></h3><p>以下みたいにした所</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">  printfn &quot;%d&quot; (System.Diagnostics.Process.GetCurrentProcess().WorkingSet64)</span>
<span class="line">  printfn &quot;%d&quot; (GC.GetTotalAllocatedBytes true)</span>
<span class="line">  printfn &quot;%d&quot; (System.Diagnostics.Process.GetCurrentProcess().PrivateMemorySize64)</span>
<span class="line">  printfn &quot;%d&quot; (System.Diagnostics.Process.GetCurrentProcess().PeakPagedMemorySize64)</span>
<span class="line">  printfn &quot;%d&quot; (System.Diagnostics.Process.GetCurrentProcess().PeakVirtualMemorySize64)</span>
<span class="line">  printfn &quot;%d&quot; (System.Diagnostics.Process.GetCurrentProcess().PeakWorkingSet64)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下みたいな結果になった。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">52350976</span>
<span class="line">4667080</span>
<span class="line">0</span>
<span class="line">0</span>
<span class="line">0</span>
<span class="line">0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>なぜPeakが0なのかは分からないが。</p><p><code>/usr/bin/time -l</code>と比べてみよう。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">$ dotnet build -c Release</span>
<span class="line">$ /usr/bin/time -l  bin/Release/net6.0/ToyRel</span>
<span class="line">...</span>
<span class="line">        0.95 real         0.99 user         0.02 sys</span>
<span class="line">            50819072  maximum resident set size</span>
<span class="line">               12713  page reclaims</span>
<span class="line">...</span>
<span class="line">            31428608  peak memory footprint</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>maximum resident set sizeとWorkingSet64はほぼ一致している。 一方でこれらはアプリがallocateしたもの以外のも含んでそう。</p><p>この辺はGCが使われるくらい長く動くもので測るとどうなるかを調べてみないと何がいいか結論は難しいが、</p><h3 id="ハッシュ関数" tabindex="-1"><a class="header-anchor" href="#ハッシュ関数"><span>ハッシュ関数</span></a></h3><p>ファイルパスからハッシュを計算したいとする。 暗号用途じゃなくてハッシュ用途。</p><p><a href="https://github.com/Cyan4973/xxHash" target="_blank" rel="noopener noreferrer">Cyan4973/xxHash: Extremely fast non-cryptographic hash algorithm</a></p><p>SpookyHashが良さそう？</p><p><a href="https://github.com/brandondahler/Data.HashFunction/" target="_blank" rel="noopener noreferrer">brandondahler/Data.HashFunction: C# library to create a common interface to non-cryptographic hash functions.</a></p><p>一通り揃っているのでどれでも良さそうだが。</p>`,39)])])}const o=a(r,[["render",l]]),c=JSON.parse('{"path":"/FSharpLesson.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1664452079000,"contributors":[{"name":"Kazuma Arino","username":"","email":"hogeika2@gmail.com","commits":17}],"changelog":[{"hash":"5bfa964cc2da7b8aed27dcd1f0400bb876419d48","time":1664452079000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"56153662254e185ed8aa183a35b958822eaed32f","time":1664346401000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"33302611e1ba949b9a6d629a5675cc24270b83d7","time":1663209916000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"32b9683b4f5571f0f98eda2883c5a956a4745ddd","time":1662881026000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"14e1d5dd8f4672885190472a30ec971ddd06bfd0","time":1662261260000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"9a0346d9280e6b8269b8af4c1db6a32dc4d3baea","time":1661678169000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"c37f647079849a9c5bb2f9e3b9076c2f1eb514f4","time":1661517297000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"f5062fe97e63b1b695d749068b703cfceaf37bb5","time":1658558302000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"c6ac20eb8a4719bdca86ef60538c6a146476dec9","time":1658392706000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"4f6898838086c41c621b712d768a47e53023d767","time":1657196823000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"2994843074401e9894de58186ac16ac996188a57","time":1656835341000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"d4b3c822f076b74232dcfcda851db517f104f368","time":1656811142000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"b0d344524623aa0ccacced97695ad3dcffdb36d9","time":1656810005000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"2ae129cd481e09d0903004a9c13fd3b5d18a383c","time":1656809561000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"3a584d45d9768be12cb452979dcb46f721d34c00","time":1656808512000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"95b7ef87a3a7515eddcbe7346d8f22cb99e339ab","time":1656808355000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"1e5e1a249df377efb289b64bc5f3086737a29b2b","time":1656806253000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"}]},"filePathRelative":"FSharpLesson.md"}');export{o as comp,c as data};
