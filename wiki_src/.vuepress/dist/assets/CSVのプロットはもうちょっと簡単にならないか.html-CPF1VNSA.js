import{_ as a,c as s,a as n,o as l}from"./app-CHiHTJW6.js";const p={};function i(t,e){return l(),s("div",null,[...e[0]||(e[0]=[n(`<p>花粉のデータがcsvで落とせる。</p><p><a href="https://wxtech.weathernews.com/pollen/index.html" target="_blank" rel="noopener noreferrer">花粉飛散数データの無料ダウンロード：WxTech®（ウェザーテック）</a></p><p>headすると以下みたいな感じ（数字は適当）</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">citycode,date,pollen</span>
<span class="line">14208,2022-02-25T00:00:00+09:00,3</span>
<span class="line">14208,2022-02-25T01:00:00+09:00,5</span>
<span class="line">14208,2022-02-25T02:00:00+09:00,12</span>
<span class="line">14208,2022-02-25T03:00:00+09:00,24</span>
<span class="line">14208,2022-02-25T04:00:00+09:00,23</span>
<span class="line">14208,2022-02-25T05:00:00+09:00,12</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>これは時間ごとになっているので日ごとでgroup byして足してプロットしたい。 colabかRStudioだな、とは思うが、なんかcsvをいちいちcolabにロードするのがかったるい。 RStudioでいいか、と作業したし、まぁこれでいいんだが、なんか無駄に大げさな気もする。</p><p>もっとコマンドラインに近いツールでどうにかならないか。 ツールにcsvのパスを渡す、そこでdplyr的にちょくちょく操作してgnuplotでplotされる。 それくらいでいいんだが。</p><p>colabじゃなくてpythonのreplでGUIが出ればそれでいいかもしれないし、そのくらいは出るような気もする。</p><p>ファイルをロードするんじゃなくて、引数で指定したい。ドラッグアンドドロップでぱっと指定したいから。</p><p>dplyrは快適なのでわざわざ作りたいと思うほどRStudioに不満がある訳でも無いんだが、なんか大げさな気はしてしまう。 awkっぽいdplyrがあればいいんだけどなぁ。</p><p>なんか最近生のcsvでいろいろwebでデータが配られる事が増えた気がするので、こうしたちょっとしたcsvを簡単にプロットするって需要はそこそこあると思うのだけれど。</p><h2 id="欲しいもの" tabindex="-1"><a class="header-anchor" href="#欲しいもの"><span>欲しいもの</span></a></h2><p>とりあえず仮にcsvplrと呼ぼう。 イメージとしては、</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">$ csvplr ~/some/path/to/some_path.csv</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>みたいな感じで実行するコマンドで、 実行するとウィンドウが立ち上がり、上にテキストエリア、下に出力用のエリアとグラフのエリアが出来る、とか。</p><p>そしてtableという変数にデータフレームがロードされて、dplyrっぽい感じでテーブルを操作する。 操作をすると基本的には出力用のエリアにデータフレームのheadが表示される。 で、dplyr的な操作の最後にplotに流すとプロットされる。plotは基本的にはxとyの２つのデータだけで、幾つかのスタイルが選べる程度。</p><p>dplyr的な操作は変数への代入は出来ず、いつも非破壊的に単なるtransformとして適用していく感じ。</p><h2 id="構成" tabindex="-1"><a class="header-anchor" href="#構成"><span>構成</span></a></h2><p>もうちょっと考えてみた。</p><p>ようするにawkと同じ感じのコマンドライン型の言語と、gnuplotか何かのplotのコマンドと、 それらを統合するGUIの３つに分けるのが良さそうな気がする。</p><p>コマンドライン型の言語は以前PoCとして作った[[GoFO]]に毛が生えた程度なんじゃなかろうか？</p><p>plotはとりあえずgnuplotで良い気がする。</p><p>統合するGUIは最近のパターンの[[FSharp]]+[[photino]]でそんなに難しくなさそう。</p><p>そもそもGUI要るのか？dplyrっぽいawkとgnuplotのラッパーだけで良いのでは？</p><h2 id="もっとunix的にならないか" tabindex="-1"><a class="header-anchor" href="#もっとunix的にならないか"><span>もっとUnix的にならないか？</span></a></h2><p>しばらく考えてみて、どうも中途半端なものならRを使えばいいや、という気分になってきた。 それで答えでもいいのだが、もうちょっと反対側に振り切って、Unixコマンド群に出来ないだろうか？</p><p>つまりパイプは本当にシェルのパイプを使う。</p><p>花粉データをプロットした時のdplrは以下だから、</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">perday &lt;- table %&gt;%</span>
<span class="line">  filter(pollen != -9999) %&gt;%</span>
<span class="line">  mutate(day = date(date)) %&gt;%</span>
<span class="line">  group_by(day) %&gt;%</span>
<span class="line">  summarise(perday=sum(pollen))</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>これを単純にUnixに翻訳すると以下だろうか？</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">$ csvplr head ~/some/path/to/some_path.csv</span>
<span class="line">$ cat ~/some/path/to/some_path.csv | csvplr filter &#39;pollen != -9999&#39; | head</span>
<span class="line">$ cat ~/some/path/to/some_path.csv | csvplr filter &#39;pollen != -9999&#39; | csvplr mutate &#39;day=date(date)&#39; | head</span>
<span class="line">$ cat ~/some/path/to/some_path.csv | csvplr filter &#39;pollen != -9999&#39; | csvplr mutate &#39;day=date(date)&#39; | csvplr group_by &#39;day&#39; | head</span>
<span class="line">$ cat ~/some/path/to/some_path.csv | csvplr filter &#39;pollen != -9999&#39; | csvplr mutate &#39;day=date(date)&#39; | csvplr group_by &#39;day&#39; | csvplr summarise &#39;perday=sum(pollen)&#39;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>うーむ、やや野暮ったさがあるのでもうひと工夫という所か。 group_byは実装方法がよくわからないな。dplyrはdataframeに付加情報がつくんだっけ。 group_byカラムが追加されて一意のidが振られるとかで良いかもしれない。</p><p>最後の行を改行して書くと以下のようになる。（シェルスクリプト的には改行エスケープしないとダメだけど）</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">$ cat ~/some/path/to/some_path.csv</span>
<span class="line"> | csvplr filter &#39;pollen != -9999&#39;</span>
<span class="line"> | csvplr mutate &#39;day=date(date)&#39;</span>
<span class="line"> | csvplr group_by &#39;day&#39;</span>
<span class="line"> | csvplr summarise &#39;perday=sum(pollen)&#39;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>こうして見ると悪くないな。</p><p>dateとかはR互換でいいのか？という問題はあるが、仕様を覚えるの面倒なのでRに揃えるのがいいかもしれない。</p><p>サブコマンドじゃなくてプレフィクスにしてみる。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">$ cat ~/some/path/to/some_path.csv</span>
<span class="line"> | cpr_filter &#39;pollen != -9999&#39;</span>
<span class="line"> | cpr_mutate &#39;day=date(date)&#39;</span>
<span class="line"> | cpr_group_by &#39;day&#39;</span>
<span class="line"> | cpr_summarise &#39;perday=sum(pollen)&#39;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>いまいち度はまあり変わらないか。このくらいならエイリアスで良い気もする。</p><p>なんかこれはアリな気がしてきた。正式に名前をつけよう。[[csvplr]]</p>`,39)])])}const d=a(p,[["render",i]]),c=JSON.parse('{"path":"/CSV%E3%81%AE%E3%83%97%E3%83%AD%E3%83%83%E3%83%88%E3%81%AF%E3%82%82%E3%81%86%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E7%B0%A1%E5%8D%98%E3%81%AB%E3%81%AA%E3%82%89%E3%81%AA%E3%81%84%E3%81%8B.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1646708144000,"contributors":[{"name":"Kazuma Arino","username":"","email":"hogeika2@gmail.com","commits":3}],"changelog":[{"hash":"0f4df51ee2c66767fc415f97f61e5a36766fcac5","time":1646708144000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"6748ed82ce0ea2323bb1aef850215a41642563b8","time":1646707173000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"a201ae18616072aab95685479981790c7e8a279e","time":1646706577000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"}]},"filePathRelative":"CSVのプロットはもうちょっと簡単にならないか.md"}');export{d as comp,c as data};
