import{_ as e,c as p,b as n,a as s,o as i}from"./app-CHbCxg9g.js";const o={};function r(t,a){return i(),p("div",null,[...a[0]||(a[0]=[n("iframe",{sandbox:"allow-popups allow-scripts allow-modals allow-forms allow-same-origin",style:{width:"120px",height:"240px"},marginwidth:"0",marginheight:"0",scrolling:"no",frameborder:"0",src:"//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=karino203-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B01N7JZXMD&linkId=4830ad276d36509f3ffd421d2700f3ce"},null,-1),s('<h2 id="購入動機-2022-08-17" tabindex="-1"><a class="header-anchor" href="#購入動機-2022-08-17"><span>購入動機 2022-08-17</span></a></h2><p>仕事で自作言語を作っていて、新しい機能を追加する段になってどうも良いシンタックスや機能が思いつかない。 こういう言語のデザインについてヒントにならないかなぁ、と思って購入。</p><h2 id="読んでいる間の感想" tabindex="-1"><a class="header-anchor" href="#読んでいる間の感想"><span>読んでいる間の感想</span></a></h2><p>読んでいる間の感想を書いていく。</p><h3 id="_2-4まで読んだ感想-どうも言語の実現方法の話が多すぎていまいち-2022-08-19" tabindex="-1"><a class="header-anchor" href="#_2-4まで読んだ感想-どうも言語の実現方法の話が多すぎていまいち-2022-08-19"><span>2-4まで読んだ感想：どうも言語の実現方法の話が多すぎていまいち 2022-08-19</span></a></h3><p>本書の序盤にも書いてあるように、言語のデザインの話を語るのが良いと思うんだが、 どうもあまり詳しいとは思われないepoll使ったイベントシステムとかの話が多くて、 肝心の文法の変更とかはコラム的におまけ的に追加されてしまっている。 自分の方がこの辺は明らかに詳しいし経験もあるのであまり学ぶ事が無いんだよなぁ。</p><p>1-4, 1-5の言語デザイン入門はなかなか面白くて参考になる事も多かったので、 こういう話をもっと増やして欲しい気がする。この辺も決まった理由が多くて試行錯誤の過程が少ないので、 2章からは試行錯誤の過程を期待していたのだが、 どうも実現方法の紙幅が多い気がする。</p><p>たぶんこの本の読者の多くは実現方法に関心があるだろうからこれは読者の期待には答えているのかもしれないけれど、 自分の期待はそこでは無いし、そこに関しては冒頭にも述べてるようにすでにたくさん本はある。 「こういう言語を作る」と決めたら実装自体は読者は勝手に出来るという前提で、 どうやって作る対象を決めて改善していくかという所にフォーカスして欲しいんだが。 例えばBNFは知っている事を前提に文法の試行錯誤の話をして欲しい。 でもそれだと対象読者はほとんど居なくなってしまうのかねぇ。</p><p>小話とかコラム的なのは参考になる事も多く面白いので、こっちをメインにもっと増やして欲しいなぁ。</p><h3 id="_3-2、ドット記法の実現の所はなかなか面白い" tabindex="-1"><a class="header-anchor" href="#_3-2、ドット記法の実現の所はなかなか面白い"><span>3-2、ドット記法の実現の所はなかなか面白い</span></a></h3><p>総称関数とパイプをドットにする事を組み合わせて普通のドット記法のように見せる、というのは、 著者の言語設計のセンスを感じる良い章に思う。 こういうのは長年言語処理系やってきて考えてきた人間の思いつく事だよなぁ。 その前までのマルチスレッド周りの素人っぽさとは全く別次元の内容になっている。</p><h3 id="_3-3、文法を見直す話はなかなか良い" tabindex="-1"><a class="header-anchor" href="#_3-3、文法を見直す話はなかなか良い"><span>3-3、文法を見直す話はなかなか良い</span></a></h3><p>どの辺に不満を持ってどう変えたか、が書いてある。 もうちょっと試行錯誤というかたぶん検討したであろう採用されなかったアイデアをいろいろ見たいとは思うが、 そうはいってもこういった文法を変えていく過程というのはこの本を読む前に期待していた所なので楽しさはある。</p><p>一方で、自分が日々やっている自分言語の新しいクールなシンタックスを考える、という事に参考になる要素はあまり無い。 matzも同じようにやっているんだなぁ、と思うだけで、なにかアイデアを思いつくヒントみたいなものは特に無い。</p><p>ヒントという点では序盤に話していた、会社で仕事がポシャって暇になった、 とか、言語のデザインは一人で作らないととんがった所が出ない、とか、 本当にこだわる所以外は普通にしておく、みたいな話の方が参考にはなった。</p><h3 id="nan-boxingの話はなかなか勉强になった" tabindex="-1"><a class="header-anchor" href="#nan-boxingの話はなかなか勉强になった"><span>NaN Boxingの話はなかなか勉强になった</span></a></h3><p>ソケットの所はいまさらC言語でソケットプログラミングの話を長々されても…という感じで存在意義が良く分からなかった。 言語処理系の拡張の仕方の例を話すにしてももうちょっと良い例があったのでは無いか、と思うし、 ソケットの話はいかにも「なぜ今どきC言語を選んでしまった…」という内容になってしまっている。</p><p>基本データ構造の話なども別段知らない事も無く、Lispとかで良くある話が繰り返されているだけという印象。 だが知らない人にはこういうのも価値はある事かもしれないなぁ、と思わなくも無い。 この辺、この書籍のターゲットが揺れている所だよなぁ。 言語デザインに興味がある自分みたいな読者だけに絞ると狭すぎるが、 言語処理系の作り方を知りたい人向けの解説を増やしてしまうと似たような本がたくさんあるのであまり価値が無くなってしまう、という。</p><p>ただNaN Boxingは自分は知らなかったので勉强になった。 結局自分が知っているか知っていないかで印象は随分変わるよなぁ。 単なるエッセイ集として知らない所をへーっと読むくらいの気持ちで読んでいくのは一つのスタンスかもしれない。</p><h2 id="読み終わっての感想-2022-08-25" tabindex="-1"><a class="header-anchor" href="#読み終わっての感想-2022-08-25"><span>読み終わっての感想 2022-08-25</span></a></h2><p>GCの本の丸写しみたいなGCの解説がダラダラ続いたあとに「実装する気力がわかずに実際は実装できてません」と続いたり、 突然ロックフリーの解説が始まったと思ったら実装しようとして「なんかバグってて使えませんでした」と言い出したり、 ビッグデータの話をいろいろしたあとにメモリ上でsortを実装したり、 なんか全体的に「それはどうなの？」と思うようなのが続いていた。</p><p>本書で本人が述べているようにパラレルのプログラムも統計のプログラムも全然得意じゃないのにそういう言語を作ろう、 というあたりにいろいろ無理が出ている。 正直これを書いたのがmatzじゃなければ「これは酷い」で終わった本かもしれない。</p><p>だが、これを書いているのがmatzだ、というのはちょっと考えさせられるものがあった。 自分に十分な経験が無い分野でもとりあえず欲しいからやってみる、 という姿勢が、Rubyを生んだのかもしれないよなぁ。 いつも成功する訳では無い、というより失敗の方が多いだろうけれど、 少なくともmatzはRubyという特大ホームランを一本打っているからなぁ。</p><p>自分ももっと苦手な分野でも壮大なものにチャレンジしたりしていった方がいいのかもしれない。</p><p>後半のかなりの部分が実際の実装の話ばかりで、しかもただ書けば出来るような事を書きました、という内容で、あまり読む価値は感じなかった。 これでは良くある「自分で言語を作ってみよう」系の本と同じではないか、という気もしたし、 しかもいまさらC言語ゆえの面倒さをいろいろ解説されてもいまいち読む気が起こらない。 これは自分的には残念だったが、あまり言語処理系とかを勉强した事が無い人はむしろこういう内容が勉强になる、 と思ったりするのかもしれないし、そっちの読者の方が多いのかもしれないが。</p><p>ただ自分の期待していた、どうやってクールな言語（シンタックスとか）を思いつくのか、 という問題意識に対しても、全体の1/10くらいはそういう内容が含まれていたので、参考にはなった。 参考になったというか、結局自分が今やっているような事をやっていくしか無いっぽいな、 と思えたので、このままの方針でやっていこう、と自信はついた。 それは本書を読んだ意義というか、読んだ甲斐があった気がする。</p><p>読み物としては結構面白かった。なんか「えー？そりゃだめだろ〜？」と思って読んでいって、あとのコラムで「だめでした」って続いて、「ですよね〜」とか思いながら読むのが、なんかエンターテインメント性を感じてちょっとおもしろかった。</p><p>余談だが後半の実用的な例としては、ほとんど自分が作った[[csvplr]]と[[htmnix_chart]]でもっといい感じに実現できているのばかりで、 この辺は自分の方がセンスあるんじゃないか？という気もした。 実際自分は花粉症の時期にはバリバリ使っているしね。</p><h3 id="今の時代でもこういうふうにやってみるのが大切なのだろうか" tabindex="-1"><a class="header-anchor" href="#今の時代でもこういうふうにやってみるのが大切なのだろうか"><span>今の時代でもこういうふうにやってみるのが大切なのだろうか？</span></a></h3><p>Rubyを生み出したのがこういうやってみる姿勢だったのかもしれない、と思う一方で、 今の時代に同じやり方で大きな成功が生まれうるのか？というのは個人的に少し気になったので考えてみたい。</p><p>まずStreem、使ってみたいとも今後が楽しみという気も全くしない。 これはC言語だというのがまず大きいように思う。 C言語なのはmatzがC言語に慣れているからで、Rubyと同じように始めてみたんだと思うけれど、 その結果を見るに、やはり90年代と今では大きく時代が違うよなぁ、と感じてしまう。 あの頃よりも今の方が、いろいろなすでにあるものをうまく使う能力の方が重要になってきているのでは？</p><p>でもこういうのって新しいものが生み出されてみるまで分からないものだよなぁ。 iPhoneが出る前に携帯業界に同じような事を思っていたが、iPhoneは全く新しいもので全てを変えた。 時代的にもういろんなものがあるので新しいものを生み出す力がそれほど活かせない、 というのは、結局は本当かは事後的にしか分からないという話にも思う。 まぁ本当の所は分からないので大切なのは、自分はどちらを信じるか？という事かもしれない。</p><p>Streemが初期のRubyと違う所に、とりあえず使ってみたい用途があまり無いというのがあるようにも思う。 Rubyはシェル回りで雑用を片付ける、という明確な使いたい分野があって、それが出来る程度の完成度はそんなに遠くもなかった。 いろいろとできてない所があっても自分の問題が片付けられれば十分実用になる。</p><p>でもStreemはまずマルチコアを活かしたい、というのが動機にあるが、マルチコアを活かすためには結構大規模な事をする必要がある。 「まだまだ完成は遠いがとりあえず目先の事はやれる」という段階のマルチコアを活かした状態というのはなかなか考えづらい。 でもマルチコアの事を考えないなら、C言語でわざわざ作らなくても構わないように思う。 それこそ、dplyrとggplot2じゃだめなの？という話になってしまう。 RxJavaとは凄いにた事やっているからJava+RxJavaでいいのでは？という話もあるし、 それならKotlinとFlowでもいい気がしてしまう。 なんかマルチコアを活かすってのは、ちょっと小さく始める対象として難しいよなぁ。</p><p>これは見方を変えると、やってみたい事が小さく始めづらい事になっている、という事にも思える。 コアを使い切るような事で大きなデータでなにかやりたい、というのは、 C言語で独自の言語を1から作る、というのと相性が悪いんじゃないか。</p><p>例えば今自分は仕事で新しい言語を作っていて、これは既存の言語には無い制約がいろいろ必要だからやっているのだが、 これは動かす周辺に多くの知識と経験が必要な分野になっている。 だからこそ誰も作ってないという面もある訳で。 こういう所で新しい言語作るなら、知らないけれどとりあえずやってみる、 という感じでは作れない気もする。</p><p>こうして考えてみると、今の時代がどちらかはおいておいて、自分は経験の必要な所で勝負したい、と思っている気がするな。 自分が苦手だが誰もやらない分野に挑む、というよりも、皆ができない分野を自分の経験と実力でやっていく、 みたいな風に戦っていきたいと思っている気がした。</p>',37)])])}const c=e(o,[["render",r]]),m=JSON.parse('{"path":"/%E3%80%90%E6%9B%B8%E7%B1%8D%E3%80%91%E3%81%BE%E3%81%A4%E3%82%82%E3%81%A8%E3%82%86%E3%81%8D%E3%81%B2%E3%82%8D%E3%80%81%E8%A8%80%E8%AA%9E%E3%81%AE%E3%81%97%E3%81%8F%E3%81%BF.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1661435023000,"contributors":[{"name":"Kazuma Arino","username":"","email":"hogeika2@gmail.com","commits":4}],"changelog":[{"hash":"7181a99c0ce51ff330e5cd9beda875d40c7c564a","time":1661435023000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"ec2c84a56f49ecf33fa64a96ef54abf7c8f49c50","time":1660918771000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"e3e926ea8e38a48e2831b0e69004d70a232cd16c","time":1660907862000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"},{"hash":"f2923c32c221e8586f3f96ff2cf149172a38337f","time":1660736730000,"email":"hogeika2@gmail.com","author":"Kazuma Arino","message":"update"}]},"filePathRelative":"【書籍】まつもとゆきひろ、言語のしくみ.md"}');export{c as comp,m as data};
